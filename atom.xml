<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hfy Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://haofangyuan.github.io/"/>
  <updated>2017-11-17T06:45:15.838Z</updated>
  <id>https://haofangyuan.github.io/</id>
  
  <author>
    <name>郝方圆</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>protobuf的学习</title>
    <link href="https://haofangyuan.github.io/2017/11/16/protobuf/"/>
    <id>https://haofangyuan.github.io/2017/11/16/protobuf/</id>
    <published>2017-11-16T10:56:11.000Z</published>
    <updated>2017-11-17T06:45:15.838Z</updated>
    
    <content type="html"><![CDATA[<p>  开始学习pb了，来些总结吧！<br><a id="more"></a><br>本人项目源码地址：<a href="https://github.com/haofangyuan/springboot-protobuf" target="_blank" rel="external">https://github.com/haofangyuan/springboot-protobuf</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://blog.csdn.net/u010939285/article/details/78538927" target="_blank" rel="external">protobuf 和 intellij 配置使用</a><br><a href="http://colobu.com/2015/01/07/Protobuf-language-guide/" target="_blank" rel="external">Protobuf 语法指南</a><br><a href="http://blog.csdn.net/z69183787/article/details/52610138" target="_blank" rel="external">httpclient ＋protobuf 实现数据传输</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  开始学习pb了，来些总结吧！&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="protobuf" scheme="https://haofangyuan.github.io/categories/protobuf/"/>
    
    
      <category term="protobuf" scheme="https://haofangyuan.github.io/tags/protobuf/"/>
    
  </entry>
  
  <entry>
    <title>springboot异常</title>
    <link href="https://haofangyuan.github.io/2017/10/27/springboot-exception/"/>
    <id>https://haofangyuan.github.io/2017/10/27/springboot-exception/</id>
    <published>2017-10-27T12:37:11.000Z</published>
    <updated>2017-11-17T07:20:44.726Z</updated>
    
    <content type="html"><![CDATA[<p>　　spring boot 项目遇到的一些问题<br><a id="more"></a></p>
<h2 id="项目假死"><a href="#项目假死" class="headerlink" title="项目假死"></a>项目假死</h2><p>问题描述：<br>　　在linux服务器中，springboot项目运行一段时间后，ps -ef|grep java发现项目进程在，但是打开日志，请求项目接口，发现服务器没有反应，好像死了一样。什么原因呢？<br>解决：<br>　　问题出现后，通过 <code>jstack 进程id</code> 发现，出现了死锁问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">JNI global references: 296</div><div class="line"></div><div class="line"></div><div class="line">Found one Java-level deadlock:</div><div class="line">=============================</div><div class="line">&quot;http-nio-8889-exec-34&quot;:</div><div class="line">  waiting to lock monitor 0x00007fe2c45001d8 (object 0x0000000086bef5e8, a com.hfy.service.impl.SessionServiceImpl),</div><div class="line">  which is held by &quot;SockJS-1&quot;</div><div class="line">&quot;SockJS-1&quot;:</div><div class="line">  waiting to lock monitor 0x00007fe2d424ec98 (object 0x0000000086bef5c8, a com.hfy.service.impl.TokenServiceImpl),</div><div class="line">  which is held by &quot;SockJS-2&quot;</div><div class="line">&quot;SockJS-2&quot;:</div><div class="line">  waiting to lock monitor 0x00007fe2c45001d8 (object 0x0000000086bef5e8, a com.hfy.service.impl.SessionServiceImpl),</div><div class="line">  which is held by &quot;SockJS-1&quot;</div><div class="line"></div><div class="line">Java stack information for the threads listed above:</div><div class="line">===================================================</div><div class="line">&quot;http-nio-8889-exec-34&quot;:</div><div class="line">	at com.hfy.service.impl.SessionServiceImpl.keepAlive(SessionServiceImpl.java:114)</div><div class="line">	- waiting to lock &lt;0x0000000086bef5e8&gt; (a com.hfy.service.impl.SessionServiceImpl)</div><div class="line">	at com.hfy.PmWebSocketHandler.handleTextMessage(PmWebSocketHandler.java:85)</div><div class="line">	- locked &lt;0x00000000d8ca01c8&gt; (a org.springframework.web.socket.adapter.standard.StandardWebSocketSession)</div><div class="line">	............</div><div class="line">&quot;SockJS-1&quot;:</div><div class="line">	at com.hfy.service.impl.TokenServiceImpl.deleteToken(TokenServiceImpl.java:49)</div><div class="line">	- waiting to lock &lt;0x0000000086bef5c8&gt; (a com.hfy.service.impl.TokenServiceImpl)</div><div class="line">	............</div><div class="line">	at com.hfy.service.impl.SessionServiceImpl.sessionTimeout(SessionServiceImpl.java:96)</div><div class="line">	- locked &lt;0x0000000086bef5e8&gt; (a com.hfy.service.impl.SessionServiceImpl)</div><div class="line">	at com.hfy.service.ScheduleTask.sessionTimeout(ScheduleTask.java:75)</div><div class="line">	.......</div><div class="line">&quot;SockJS-2&quot;:</div><div class="line">	at com.hfy.service.impl.SessionServiceImpl.deleteSession(SessionServiceImpl.java:47)</div><div class="line">	- waiting to lock &lt;0x0000000086bef5e8&gt; (a com.hfy.service.impl.SessionServiceImpl)</div><div class="line">	............</div><div class="line">	at com.hfy.service.impl.TokenServiceImpl.tokenTimeout(TokenServiceImpl.java:80)</div><div class="line">	- locked &lt;0x0000000086bef5c8&gt; (a com.hfy.service.impl.TokenServiceImpl)</div><div class="line">	at com.hfy.service.ScheduleTask.tokenTimeout(ScheduleTask.java:69)</div><div class="line">	.......</div><div class="line"></div><div class="line">Found 1 deadlock.</div></pre></td></tr></table></figure></p>
<p>可以很清楚的看到：<br>　　“SockJS-2”:<br>　　TokenServiceImpl.java:80执行tokenTimeout()的时候，获得了锁<0x0000000086bef5c8>,方法执行到了SessionServiceImpl.java:47,执行deleteSession时，等待锁<0x0000000086bef5e8><br>　　“SockJS-1”:<br>　　SessionServiceImpl.java:96执行sessionTimeout()的时候，获得了锁<0x0000000086bef5e8>,方法执行到了TokenServiceImpl.java:49，执行deleteToken时，等待锁<0x0000000086bef5c8><br>　　典型的死锁，知道问题所在，解决去了。。。。。。</0x0000000086bef5c8></0x0000000086bef5e8></0x0000000086bef5e8></0x0000000086bef5c8></p>
<h2 id="Tomcat一个BUG造成CLOSE-WAIT"><a href="#Tomcat一个BUG造成CLOSE-WAIT" class="headerlink" title="Tomcat一个BUG造成CLOSE_WAIT"></a>Tomcat一个BUG造成CLOSE_WAIT</h2><p>此问题还未遇见<br><a href="http://cxytiandi.com/blog/detail/11147" target="_blank" rel="external">http://cxytiandi.com/blog/detail/11147</a><br><a href="http://www.cnblogs.com/saaav/p/6258831.html" target="_blank" rel="external">http://www.cnblogs.com/saaav/p/6258831.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　spring boot 项目遇到的一些问题&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="https://haofangyuan.github.io/categories/springboot/"/>
    
    
      <category term="springboot" scheme="https://haofangyuan.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>springboot一些额外的知识</title>
    <link href="https://haofangyuan.github.io/2017/10/26/springboot_extra/"/>
    <id>https://haofangyuan.github.io/2017/10/26/springboot_extra/</id>
    <published>2017-10-26T14:56:11.000Z</published>
    <updated>2017-11-17T07:35:03.701Z</updated>
    
    <content type="html"><![CDATA[<p>　　自己一些总结<br><a id="more"></a></p>
<h2 id="修改网站小图标"><a href="#修改网站小图标" class="headerlink" title="修改网站小图标"></a>修改网站小图标</h2><p>1、在<code>application.properties</code>中配：<code>spring.mvc.favicon.enabled = false</code><br>2、网站图片命名为<code>favicon.ico</code>;<br>3、将<code>favicon.ico</code>放在<code>resources/static</code>目录下；<br>4、ok，结束ヾ(◍°∇°◍)ﾉﾞ</p>
<h2 id="启动彩蛋"><a href="#启动彩蛋" class="headerlink" title="启动彩蛋"></a>启动彩蛋</h2><p>springboot项目启动总会打印一下内容，想要更换怎么办？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.   ____          _            __ _ _</div><div class="line">/\\ / ___&apos;_ __ _ _(_)_ __  __ _ \ \ \ \</div><div class="line">( ( )\___ | &apos;_ | &apos;_| | &apos;_ \/ _` | \ \ \ \</div><div class="line">\\/  ___)| |_)| | | | | || (_| |  ) ) ) )</div><div class="line">&apos;  |____| .__|_| |_|_| |_\__, | / / / /</div><div class="line">=========|_|==============|___/=/_/_/_/</div><div class="line">:: Spring Boot ::        (v1.4.0.RELEASE)</div></pre></td></tr></table></figure></p>
<p>1、在<code>resource</code>目录下面放入一个<code>banner.txt</code>文件，Spring Boot启动项目的时候就会优先启动这个文件中的内容；<br>2、在里面存放要打印的内容；<br>3、文件中：Spring Boot提供了一个枚举类AnsiColor，通过<code>${AnsiColor.BRIGHT_YELLOW}</code>来控制文件中字符的颜色，<code>${spring-boot.version}</code>这个是springboot的版本号；<br>4、ok啦啦啦……  </p>
<h3 id="额外："><a href="#额外：" class="headerlink" title="额外："></a>额外：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$&#123;application.version&#125;           这个是MANIFEST.MF文件中的版本号  </div><div class="line">$&#123;application.formatted-version&#125; 这个是上面的的版本号前面加v后上括号  </div><div class="line">$&#123;spring-boot.version&#125;           这个是springboot的版本号  </div><div class="line">$&#123;spring-boot.formatted-version&#125; 同上</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>参考链接：<a href="http://www.jianshu.com/p/692be2b00e6b" target="_blank" rel="external">http://www.jianshu.com/p/692be2b00e6b</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　自己一些总结&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://haofangyuan.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="json" scheme="https://haofangyuan.github.io/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>websocket相关问题</title>
    <link href="https://haofangyuan.github.io/2017/10/26/websocket/"/>
    <id>https://haofangyuan.github.io/2017/10/26/websocket/</id>
    <published>2017-10-26T14:56:11.000Z</published>
    <updated>2017-11-15T10:04:46.812Z</updated>
    
    <content type="html"><![CDATA[<p>  自己一些总结<br><a id="more"></a></p>
<h2 id="UnresolvedAddressException"><a href="#UnresolvedAddressException" class="headerlink" title="UnresolvedAddressException"></a>UnresolvedAddressException</h2><p>　　连接 Connecting to WebSocket at ws://www.hfy.com:8888/testSvr，<br>结果出现异常：UnresolvedAddressException  </p>
<p>　　检测发现dns配置正确。后来原因是：服务器连接数已达到上限  </p>
<h2 id="TXT-PRIVATE-XX"><a href="#TXT-PRIVATE-XX" class="headerlink" title="TXT_PRIVATE_XX"></a>TXT_PRIVATE_XX</h2><p>　　此问题的原因是：session已经关闭了，却还在使用session发送消息。</p>
<h2 id="timeoutException"><a href="#timeoutException" class="headerlink" title="timeoutException"></a>timeoutException</h2><p>　　同时发现会报错：WritePendingException<br>　　这种问题在服务端处理的比较慢的时候出现。<br>　　为了更改的找出问题所在，客户端一秒发送100条数据，服务端一秒钟处理一条数据（线程休眠），出现此问题。<br>　　因为：很多数据存储在缓存中，无法继续写入，超时。<br>　　至于写绑定异常，本人认为是：超时关闭，写入关闭原因，而之前的数据超时没写完，两个一起写造成的。</p>
<h2 id="超时断开"><a href="#超时断开" class="headerlink" title="超时断开"></a>超时断开</h2><p>　　两个session间，如果不长时间进行通信，会自动断开。还有路由等原因会在短时间内断开，察觉不到。一端认为还在，另一端已经断开了。<br>解决办法：<br>　　发送心跳包</p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>session突然关闭，handler的handleTextMessage方法还是会接收到消息的。所有数据处理之前，可以使用session.isOpen()来判断session的状态。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.cnblogs.com/highriver/archive/2012/01/16/2324035.html" target="_blank" rel="external">http://www.cnblogs.com/highriver/archive/2012/01/16/2324035.html</a><br><a href="https://my.oschina.net/ldl123292/blog/304360" target="_blank" rel="external">https://my.oschina.net/ldl123292/blog/304360</a></p>
<p>Spring Websocket Session共享解决思路（背景）<a href="http://www.sojson.com/blog/238.html" target="_blank" rel="external">http://www.sojson.com/blog/238.html</a><br>看完让你彻底搞懂Websocket原理 <a href="http://blog.csdn.net/frank_good/article/details/50856585" target="_blank" rel="external">http://blog.csdn.net/frank_good/article/details/50856585</a><br>webSocket中并发的策略 <a href="http://blog.csdn.net/heshuangyuan123/article/details/39023569" target="_blank" rel="external">http://blog.csdn.net/heshuangyuan123/article/details/39023569</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  自己一些总结&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://haofangyuan.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="json" scheme="https://haofangyuan.github.io/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>springboot整合logback</title>
    <link href="https://haofangyuan.github.io/2017/10/23/springboot-logback/"/>
    <id>https://haofangyuan.github.io/2017/10/23/springboot-logback/</id>
    <published>2017-10-23T12:00:00.000Z</published>
    <updated>2017-11-15T10:04:46.802Z</updated>
    
    <content type="html"><![CDATA[<p>  整合logback，发送错误邮件<br><a id="more"></a>  </p>
<h2 id="pom-xml中引入jar"><a href="#pom-xml中引入jar" class="headerlink" title="pom.xml中引入jar"></a>pom.xml中引入jar</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 发送邮件需要的2个jar --&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">   &lt;groupId&gt;org.codehaus.janino&lt;/groupId&gt;</div><div class="line">   &lt;artifactId&gt;janino&lt;/artifactId&gt;</div><div class="line">   &lt;version&gt;2.7.8&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">   &lt;groupId&gt;javax.mail&lt;/groupId&gt;</div><div class="line">   &lt;artifactId&gt;mail&lt;/artifactId&gt;</div><div class="line">   &lt;version&gt;1.4.7&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<h2 id="配置logback"><a href="#配置logback" class="headerlink" title="配置logback"></a>配置logback</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;!--</div><div class="line">scan:</div><div class="line">    当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。（这个功能可以在不重启运行环境下，调整打印日志的细节，方便定位问题）</div><div class="line">scanPeriod:</div><div class="line">    设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。</div><div class="line">debug:</div><div class="line">    当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。</div><div class="line">--&gt;</div><div class="line">&lt;configuration  scan=&quot;true&quot; scanPeriod=&quot;60 seconds&quot; debug=&quot;false&quot;&gt;</div><div class="line">    &lt;!--</div><div class="line">        logger：日志所处的包</div><div class="line">        level：日志打印级别</div><div class="line">    --&gt;</div><div class="line">    &lt;!--&lt;logger name=&quot;org.springframework&quot; level=&quot;WARN&quot; /&gt;--&gt;</div><div class="line"></div><div class="line">    &lt;contextName&gt;logback&lt;/contextName&gt;</div><div class="line">    &lt;property name=&quot;log.path&quot; value=&quot;./&quot; /&gt;</div><div class="line">    &lt;property name=&quot;project.name&quot; value=&quot;springboot_logback&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;property name=&quot;smtpHost&quot; value=&quot;smtp.163.com&quot; /&gt;</div><div class="line">    &lt;!--&lt;property name=&quot;smtpPort&quot; value=&quot;25&quot; /&gt;--&gt;</div><div class="line">    &lt;property name=&quot;username&quot; value=&quot;xxx@163.com&quot; /&gt;</div><div class="line">    &lt;property name=&quot;password&quot; value=&quot;xxx&quot; /&gt;</div><div class="line">    &lt;property name=&quot;SSL&quot; value=&quot;false&quot; /&gt;</div><div class="line">    &lt;property name=&quot;email_to&quot; value=&quot;xxx@qq.com&quot; /&gt;</div><div class="line">    &lt;property name=&quot;email_from&quot; value=&quot;xxx@163.com&quot; /&gt;</div><div class="line">    &lt;property name=&quot;email_subject&quot; value=&quot;【Error】: %logger&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;!--输出到控制台--&gt;</div><div class="line">    &lt;appender name=&quot;console&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</div><div class="line">        &lt;encoder&gt;</div><div class="line">            &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;:%4p %t %F:%L - %m%n&lt;/pattern&gt;</div><div class="line">        &lt;/encoder&gt;</div><div class="line">    &lt;/appender&gt;</div><div class="line"></div><div class="line">    &lt;!--文件输出的格式设置 --&gt;</div><div class="line">    &lt;appender name=&quot;file&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</div><div class="line">        &lt;file&gt;$&#123;log.path&#125;/$&#123;project.name&#125;.log&lt;/file&gt;</div><div class="line"></div><div class="line">        &lt;!-- 文件输出的日志 的格式 --&gt;</div><div class="line">        &lt;encoder&gt;</div><div class="line">            &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;:%4p %t %F:%L - %m%n&lt;/pattern&gt;</div><div class="line">            &lt;charset&gt;UTF-8&lt;/charset&gt; &lt;!-- 此处设置字符集，防止中文乱码 --&gt;</div><div class="line">        &lt;/encoder&gt;</div><div class="line"></div><div class="line"></div><div class="line">        &lt;!-- 配置日志所生成的目录以及生成文件名的规则 --&gt;</div><div class="line">        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</div><div class="line">            &lt;fileNamePattern&gt;$&#123;log.path&#125;/%d&#123;yyyy-MM&#125;/$&#123;project.name&#125;-%d&#123;yyyy-MM-dd&#125;-%i.log.gz&lt;/fileNamePattern&gt;</div><div class="line">            &lt;!--&lt;fileNamePattern&gt;%d&#123;yyyy-MM-dd&#125;.%i.log.zip&lt;/fileNamePattern&gt;--&gt;</div><div class="line">            &lt;!-- 如果按天来回滚，则最大保存时间为365天，365天之前的都将被清理掉 --&gt;</div><div class="line">            &lt;maxHistory&gt;365&lt;/maxHistory&gt;</div><div class="line">            &lt;!-- 日志总保存量为1GB --&gt;</div><div class="line">            &lt;totalSizeCap&gt;1GB&lt;/totalSizeCap&gt;</div><div class="line"></div><div class="line">            &lt;timeBasedFileNamingAndTriggeringPolicy</div><div class="line">                    class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;</div><div class="line">                &lt;!--文件达到 最大30KB时会被压缩和切割 --&gt;</div><div class="line">                &lt;maxFileSize&gt;30KB&lt;/maxFileSize&gt;</div><div class="line">            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;</div><div class="line">        &lt;/rollingPolicy&gt;</div><div class="line"></div><div class="line">    &lt;/appender&gt;</div><div class="line"></div><div class="line">    &lt;appender name=&quot;EMAIL&quot; class=&quot;ch.qos.logback.classic.net.SMTPAppender&quot;&gt;</div><div class="line">        &lt;smtpHost&gt;$&#123;smtpHost&#125;&lt;/smtpHost&gt;</div><div class="line">        &lt;smtpPort&gt;$&#123;smtpPort&#125;&lt;/smtpPort&gt;</div><div class="line">        &lt;username&gt;$&#123;username&#125;&lt;/username&gt;</div><div class="line">        &lt;password&gt;$&#123;password&#125;&lt;/password&gt;</div><div class="line">        &lt;SSL&gt;$&#123;SSL&#125;&lt;/SSL&gt;</div><div class="line">        &lt;asynchronousSending&gt;false&lt;/asynchronousSending&gt;</div><div class="line">        &lt;to&gt;$&#123;email_to&#125;&lt;/to&gt;</div><div class="line">        &lt;from&gt;$&#123;email_from&#125;&lt;/from&gt;</div><div class="line">        &lt;subject&gt;$&#123;email_subject&#125;&lt;/subject&gt;</div><div class="line">        &lt;layout class=&quot;ch.qos.logback.classic.html.HTMLLayout&quot; &gt;</div><div class="line">            &lt;pattern&gt;%date%level%thread%logger&#123;0&#125;%line%message&lt;/pattern&gt;</div><div class="line">        &lt;/layout&gt;</div><div class="line">        &lt;filter class=&quot;ch.qos.logback.core.filter.EvaluatorFilter&quot;&gt;</div><div class="line">            &lt;evaluator class=&quot;ch.qos.logback.classic.boolex.JaninoEventEvaluator&quot;&gt;</div><div class="line">                &lt;expression&gt;</div><div class="line">                    if(level &gt; WARN) &#123;</div><div class="line">                        return true;</div><div class="line">                    &#125;</div><div class="line">                    return false;</div><div class="line">                &lt;/expression&gt;</div><div class="line">            &lt;/evaluator&gt;</div><div class="line">            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;</div><div class="line">            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;</div><div class="line">        &lt;/filter&gt;</div><div class="line">    &lt;/appender&gt;</div><div class="line"></div><div class="line">    &lt;root level=&quot;debug&quot;&gt;</div><div class="line">        &lt;appender-ref ref=&quot;console&quot; /&gt;</div><div class="line">        &lt;appender-ref ref=&quot;file&quot; /&gt;</div><div class="line">        &lt;appender-ref ref=&quot;EMAIL&quot;/&gt;</div><div class="line">    &lt;/root&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import org.slf4j.Logger;</div><div class="line">import org.slf4j.LoggerFactory;</div><div class="line">private Logger logger = LoggerFactory.getLogger(this.getClass());</div></pre></td></tr></table></figure>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><h3 id="日期格式问题"><a href="#日期格式问题" class="headerlink" title="日期格式问题"></a>日期格式问题</h3><p>日期是 HH:mm:ss.SSS，而不是HH:mm:ss,SSS<br>HH:mm:ss.SSS 是15:21:21.222<br>HH:mm:ss,SSS 是07:21:21  </p>
<h3 id="error打印堆栈信息"><a href="#error打印堆栈信息" class="headerlink" title="error打印堆栈信息"></a>error打印堆栈信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">logger.error(&quot;error: &#123;&#125;&quot;, e); //打印出堆栈信息</div><div class="line">logger.error(&quot;error: &#123;&#125;&quot;, e.getMessage());// 不打印出堆栈信息</div><div class="line">logger.error(&quot;删除用户(&#123;&#125;)异常：&#123;&#125;&quot;, id, e); // 不打印出堆栈信息</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  整合logback，发送错误邮件&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="https://haofangyuan.github.io/categories/springboot/"/>
    
    
      <category term="springboot" scheme="https://haofangyuan.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>FindBugs常见错误描述和解决方法</title>
    <link href="https://haofangyuan.github.io/2017/10/18/findbugs/"/>
    <id>https://haofangyuan.github.io/2017/10/18/findbugs/</id>
    <published>2017-10-18T10:56:11.000Z</published>
    <updated>2017-11-15T10:04:46.727Z</updated>
    
    <content type="html"><![CDATA[<p>　　FindBugs常见错误描述和解决方法  　　<br><a id="more"></a></p>
<p>　　本文转载自：<a href="http://blog.sina.com.cn/s/blog_4adc4b090102vi9p.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_4adc4b090102vi9p.html</a></p>
<h3 id="DLS-DEAD-LOCAL-STORE"><a href="#DLS-DEAD-LOCAL-STORE" class="headerlink" title="DLS_DEAD_LOCAL_STORE"></a>DLS_DEAD_LOCAL_STORE</h3><p>　　描述： Dead store to 未使用的局部变量<br>　　解决方法：局部变量定义后未使用；实例化对象后又重新对该对象赋值</p>
<h3 id="ST-WRITE-TO-STATIC-FROM-INSTANCE-METHOD"><a href="#ST-WRITE-TO-STATIC-FROM-INSTANCE-METHOD" class="headerlink" title="ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD"></a>ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD</h3><p>　　描述：Write to static field 通过实例方法更新静态属性<br>　　常见于常量类，直接通过类名.常量名获取的方式违背了封装的原则，findbugs不提倡使用，而如果将常量改成静态成员变量，又因为spring不支持静态注入导致不能实现，解决方法是非静态的setter调用静态的setter方法给静态成员变量赋值。<br>　　解决方法：<br>　　常量类F：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">　　class F&#123;</div><div class="line">  public static String a = “123”;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　常量a改为静态成员变量，通过F.getA()获取，且由于spring不支持静态注入，改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class F&#123;</div><div class="line">    private static String a;</div><div class="line">    public static Integer getA() &#123;</div><div class="line">      return a;</div><div class="line">    &#125;</div><div class="line">    public void setA(String a) &#123;</div><div class="line">      setAValue(a);</div><div class="line">    &#125;</div><div class="line">    public static void setAValue(String a) &#123;</div><div class="line">      F.a = a;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="BX-UNBOXING-IMMEDIATELY-REBOXED"><a href="#BX-UNBOXING-IMMEDIATELY-REBOXED" class="headerlink" title="BX_UNBOXING_IMMEDIATELY_REBOXED"></a>BX_UNBOXING_IMMEDIATELY_REBOXED</h3><p>　　描述： Boxed value is unboxed and then immediately reboxed  装箱的值被拆箱，然后立刻重新装箱了<br>　　常见的是三目运算时，同时存在基本类型和包装类型。<br>　　解决方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Integer a = null;</div><div class="line">//...</div><div class="line">a = (a == null)?0:a;</div></pre></td></tr></table></figure></p>
<p>　　此问题在于a不为null时，会被拆箱，赋值时再装箱。这是自动装箱拆箱的特性，只要运算中有不同类型，当涉及到类型转换时，编译器就会向下转型，再进行运算。修改方法，统一类型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Integer a = null;</div><div class="line">//...</div><div class="line">a = (a == null)?Integer.valueOf(0):a;</div></pre></td></tr></table></figure></p>
<h3 id="SE-BAD-FIELD"><a href="#SE-BAD-FIELD" class="headerlink" title="SE_BAD_FIELD"></a>SE_BAD_FIELD</h3><p>　　描述： Non-transient non-serializable instance field in serializable class在可序列化的类中存在不能序列化或者不能暂存的数据<br>　　解决方法：<br>　　　　方法1：序列化该对象<br>　　　　方法2：当采用struts2框架开发，不可避免的此问题会大量出现，因为ActionSupport实现了序列化接口，action继承了此类，而service没序列化，所以在action中引用service对象时提示此错误，最简单的解决方法是将service对象声明成transient，即service不需要序列化<br>　　　　方法3(未验证)：To avoid java serialization you need to implement writeObject() and readObject() method in your Class and need to throw NotSerializableException from those method.（action中实现这两个方法?）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">private void writeObject(java.io.ObjectOutputStream stream) throws java.io.IOException &#123;</div><div class="line">    throw new java.io.NotSerializableException( getClass().getName() );</div><div class="line">&#125;</div><div class="line">private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, ClassNotFoundException &#123;</div><div class="line">    throw new java.io.NotSerializableException( getClass().getName() );</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="NP-LOAD-OF-KNOWN-NULL-VALUE"><a href="#NP-LOAD-OF-KNOWN-NULL-VALUE" class="headerlink" title="NP_LOAD_OF_KNOWN_NULL_VALUE"></a>NP_LOAD_OF_KNOWN_NULL_VALUE</h3><p>　　描述： Load of known null value加载已知是null的值<br>　　解决方法：已知方法参数为null是，直接传递null而不是参数名</p>
<h3 id="REC-CATCH-EXCEPTION"><a href="#REC-CATCH-EXCEPTION" class="headerlink" title="REC_CATCH_EXCEPTION"></a>REC_CATCH_EXCEPTION</h3><p>　　描述： Exception is caught when Exception is not thrown 过泛地捕获异常或捕获异常后未做任何处理<br>　　解决方法：异常分类捕获（至少要打印出此异常对象）</p>
<h3 id="NP-NULL-PARAM-DEREF"><a href="#NP-NULL-PARAM-DEREF" class="headerlink" title="NP_NULL_PARAM_DEREF"></a>NP_NULL_PARAM_DEREF</h3><p>　　描述： Null passed for nonnull parameter  把空值传给了非空的参数<br>　　解决方法：增加非空判断</p>
<h3 id="NP-IMMEDIATE-DEREFERENCE-OF-READLINE"><a href="#NP-IMMEDIATE-DEREFERENCE-OF-READLINE" class="headerlink" title="NP_IMMEDIATE_DEREFERENCE_OF_READLINE"></a>NP_IMMEDIATE_DEREFERENCE_OF_READLINE</h3><p>　　描述： Immediate dereference of the result of readLine() 立即引用了readLine()的结果<br>　　解决方法：判断readLine的结果是否为空</p>
<h3 id="EI-EXPOSE-REP-恶意代码漏洞"><a href="#EI-EXPOSE-REP-恶意代码漏洞" class="headerlink" title="EI_EXPOSE_REP 恶意代码漏洞"></a>EI_EXPOSE_REP 恶意代码漏洞</h3><p>　　描述：may expose internal representation by returning  getter方法返回引用类型<br>　　eclipse自动生成的引用类型(Object、数组、Date等)的getter、setter方法会得到或通过对可变对象的引用操作而暴露代码内部实现，解决方法很多，只要返回的或赋值的对象不是原引用对象即可。<br>　　解决方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//以Date类型为例：</div><div class="line">public Date getHappenTime() &#123;</div><div class="line">if(happenTime != null)&#123;</div><div class="line">return (Date) happenTime.clone();</div><div class="line">&#125;</div><div class="line">    return null;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="EI-EXPOSE-REP2-恶意代码漏洞"><a href="#EI-EXPOSE-REP2-恶意代码漏洞" class="headerlink" title="EI_EXPOSE_REP2 恶意代码漏洞"></a>EI_EXPOSE_REP2 恶意代码漏洞</h3><p>　　描述：may expose internal representation by storing an externally mutable object into  setter方法返回引用类型<br>　　eclipse自动生成的引用类型(Object、数组、Date等)的getter、setter方法会得到或通过对可变对象的引用操作而暴露代码内部实现，解决方法很多，只要返回的或赋值的对象不是原引用对象即可。<br>  解决方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//以Date类型为例：</div><div class="line">public void setHappenTime(Date happenTime) &#123;</div><div class="line">  if(happenTime != null)&#123;</div><div class="line">    this.happenTime = (Date) happenTime.clone();</div><div class="line">    &#125;else&#123;</div><div class="line">      this.happenTime = null;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　FindBugs常见错误描述和解决方法  　　&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://haofangyuan.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://haofangyuan.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>了解负载均衡 会话保持 session同步(转)</title>
    <link href="https://haofangyuan.github.io/2017/10/16/java_nginx/"/>
    <id>https://haofangyuan.github.io/2017/10/16/java_nginx/</id>
    <published>2017-10-16T04:30:00.000Z</published>
    <updated>2017-11-15T10:04:46.762Z</updated>
    
    <content type="html"><![CDATA[<p>  自己一些总结<br><a id="more"></a><br>　　转自：<a href="http://bbs.linuxtone.org/forum.php?mod=viewthread&amp;tid=18212" target="_blank" rel="external">http://bbs.linuxtone.org/forum.php?mod=viewthread&amp;tid=18212</a>  </p>
<h2 id="什么负载均衡"><a href="#什么负载均衡" class="headerlink" title="什么负载均衡"></a>什么负载均衡</h2><p>　　一个新网站是不要做负载均衡的，因为访问量不大，流量也不大，所以没有必要搞这些东西。但是随着网站访问量和流量的快速增长，单台服务器受自身硬件条件的限制，很难承受这么大的访问量。<br>　　在这种情况下，有二种方案可以选择：<br>　　1，对单台服务器的硬件进行更新，由双核的变成四核的，内存加大等。<br>　　2，增加服务器的台数，来分担服务器的负担。以实现增加网络带宽，增加服务器的处理能力的目的。<br>　　第一种方法可以理解为纵向发展，这种方法总是有限。<br>　　第二种方法才是解决问题的正确选择。<br>　　实现负载均衡的方法，大至分为二个方向，一种是用软件来实现负载均衡，另一种是硬件实现负载均衡（包括结合硬件和软件）用软件来实现负载均衡，实现负载均衡的过程，自身也要消耗一些系统资源，响应时间增加。例如：LVS,nginx,haproxy,apache等这些基于应用层的负载均衡软件，适合那些访问量不是特别大的网站。如果像sina,163这样大访量的网站，用硬件来实现负载均衡是最明志的选择。<br>　　负载均衡的算法很多，有根据请求数来进行负载均衡的，有根IP来负载均衡的，有根据流量的等等。我经常会用的二种算法:<br>　　1、根据请求数<br>　　　　a，可以实现各台服务器都能比较平均分担客户的请求，其中一台服务器down掉的话也不会造成不好的影响。<br>　　　　b，服务器间的状态要同步，如session，需要其他手段来同步这些状态。<br>　　2、根据IP<br>　　　　a，ip_hash算法可以把一个ip映射到一台服务器上，这样可以解决session同步的问题<br>　　　　b，ip_hash也有不好的地方就是，假如其中的一台服务器down掉的话，映射到这台的服务器的用户就郁闷了。<br>　　　　c，ip_hash容易导致负载不均衡的情况，现在河蟹政府对google的搜索关键词进行过滤，你会经常发现google打不开，但是过一会就好了。这让那些google的爱好者们郁闷不已，很多用户都到国外找代理去了，狗急跳墙，人急帆樯。如果这样的话，这些代理会被分到同一个服务器，会导致负载不均衡 ，甚至失效。  </p>
<h2 id="什么是会话保持，有什么作用"><a href="#什么是会话保持，有什么作用" class="headerlink" title="什么是会话保持，有什么作用"></a>什么是会话保持，有什么作用</h2><p>　　会话保持是指在负载均衡器上有一种机制，在作负载均衡的同时，还保证同一用户相关连的访问请求会被分配到同一台服务器上。</p>
<p>会话保持有什么作用呢，举例说明一下<br>　　如果有一个用户访问请求被分配到服务器A，并且在服务器A登录了，并且在很短的时间，这个用户又发出了一个请求，如果没有会话保持功能的话，这个用户的请求很有可能会被分配到服务器B去，这个时候在服务器B上是没有登录的，所以你要重新登录，但是用户并不知道自己的请求被分配到了哪里，用户的感觉就是登录了，怎么又要登录，用户体验很不好。<br>　　还有你在淘宝上面买东西，从登录＝》拍得东西＝》添加地址＝》付款，这是一个一系列的过程，也可以理解成一次操作过程，所有这一系列的操作过程都应当由一台服务器完成，而不能被负载均衡器分配到不同的服务器上。<br>　　会话保持都会有时间的限制（映射到固定某一台的服务器除外，如：ip_hash）,各种负载均衡工具都会提供这种会话保持时间的设置，LVS，apache等。连php语言都提供了会话保持时间的设定session.gc_maxlifetime会话保持时间的设定要大于session生存时间的设定，这样可以减少需要同步session的情况，但是不能杜绝。所以同步session还是要做的。  </p>
<h2 id="session同步"><a href="#session同步" class="headerlink" title="session同步"></a>session同步</h2><p>　　为什么要进行session同步，说会话保持的时候已经提到了。具体方法请参考web集群时session同步的3种方法  </p>
<p>　　web集群时session同步的3种方法  </p>
<p>　　在做了web集群后，你肯定会首先考虑session同步问题，因为通过负载均衡后，同一个IP访问同一个页面会被分配到不同的服务器上，如果session不同步的话，一个登录用户，一会是登录状态，一会又不是登录状态。所以本文就根据这种情况给出三种不同的方法来解决这个问题：  </p>
<h3 id="利用数据库同步session"><a href="#利用数据库同步session" class="headerlink" title="利用数据库同步session"></a>利用数据库同步session</h3><p>　　在做多服务器session同步时我没有用这种方法，如果非要用这种方法的话，我想过二种方法：<br>　　a，用一个低端电脑建个数据库专门存放web服务器的session，或者，把这个专门的数据库建在文件服务器上，用户访问web服务器时，会去这个专门的数据库check一下session的情况，以达到session同步的目的。<br>　　b，这种方法是把存放session的表和其他数据库表放在一起，如果mysql也做了集群了话，每个mysql节点都要有这张表，并且这张session表的数据表要实时同步。<br>　　说明：用数据库来同步session，会加大数据库的负担，数据库本来就是容易产生瓶颈的地方，如果把session还放到数据库里面，无疑是雪上加霜。上面的二种方法，第一点方法较好，把放session的表独立开来，减轻了真正数据库的负担  </p>
<h3 id="利用cookie同步session"><a href="#利用cookie同步session" class="headerlink" title="利用cookie同步session"></a>利用cookie同步session</h3><p>　　session是文件的形势存放在服务器端的，cookie是文件的形势存在客户端的，怎么实现同步呢？方法很简单，就是把用户访问页面产生的session放到cookie里面，就是以cookie为中转站。你访问web服务器A，产生了session把它放到cookie里面了，你访问被分配到web服务器B，这个时候，web服务器B先判断服务器有没有这个session，如果没有，在去看看客户端的cookie里面有没有这个session，如果也没有，说明session真的不存，如果cookie里面有，就把cookie里面的sessoin同步到web服务器B，这样就可以实现session的同步了。  </p>
<p>　　说明：这种方法实现起来简单，方便，也不会加大数据库的负担，但是如果客户端把cookie禁掉了的话，那么session就无从同步了，这样会给网站带来损失；cookie的安全性不高，虽然它已经加了密，但是还是可以伪造的。  </p>
<h3 id="利用memcache同步session"><a href="#利用memcache同步session" class="headerlink" title="利用memcache同步session"></a>利用memcache同步session</h3><p>　　memcache可以做分布式，如果没有这功能，他也不能用来做session同步。他可以把web服务器中的内存组合起来，成为一个”内存池”，不管是哪个服务器产生的sessoin都可以放到这个”内存池”中，其他的都可以使用。  </p>
<p>　　优点：以这种方式来同步session，不会加大数据库的负担，并且安全性比用cookie大大的提高，把session放到内存里面，比从文件中读取要快很多。<br>　　缺点：memcache把内存分成很多种规格的存储块，有块就有大小，这种方式也就决定了，memcache不能完全利用内存，会产生内存碎片，如果存储块不足，还会产生内存溢出。  </p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>　　上面三种方法都是可行的<br>　　第一种方法，最影响系统速度的那种，不推荐使用；<br>　　第二种方法，效果不错，不过安全隐患一样的存在；<br>　　第三种方法，个人觉得第三种方法是最好的，推荐大家使用;  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  自己一些总结&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://haofangyuan.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://haofangyuan.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java中的HashMap</title>
    <link href="https://haofangyuan.github.io/2017/10/16/java-HashMap/"/>
    <id>https://haofangyuan.github.io/2017/10/16/java-HashMap/</id>
    <published>2017-10-16T04:30:00.000Z</published>
    <updated>2017-11-15T10:04:46.747Z</updated>
    
    <content type="html"><![CDATA[<p>　　hashMap的那些事<br><a id="more"></a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="!http://www.infoq.com/cn/articles/ConcurrentHashMap">深入分析ConcurrentHashMap</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　hashMap的那些事&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://haofangyuan.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://haofangyuan.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>adminLTE使用中遇到的难点</title>
    <link href="https://haofangyuan.github.io/2017/09/05/adminlte/"/>
    <id>https://haofangyuan.github.io/2017/09/05/adminlte/</id>
    <published>2017-09-05T10:37:11.000Z</published>
    <updated>2017-11-15T10:04:46.726Z</updated>
    
    <content type="html"><![CDATA[<p>　　这里主要记录使用adminlte时遇到的困难。<br><a id="more"></a></p>
<h2 id="修改form缩放展开图标"><a href="#修改form缩放展开图标" class="headerlink" title="修改form缩放展开图标"></a>修改form缩放展开图标</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    // 在引入js之前更改配置</div><div class="line">    var AdminLTEOptions = &#123;</div><div class="line">        boxWidgetOptions: &#123;</div><div class="line">            boxWidgetIcons: &#123;</div><div class="line">                //Collapse icon</div><div class="line">                collapse: &apos;fa-angle-down&apos;,</div><div class="line">                //Open icon</div><div class="line">                open: &apos;fa-angle-right&apos;,</div><div class="line">                //Remove icon</div><div class="line">                remove: &apos;fa-times&apos;</div><div class="line">            &#125;,</div><div class="line">            boxWidgetSelectors: &#123;</div><div class="line">                //Remove button selector</div><div class="line">                remove: &apos;[data-widget=&quot;remove&quot;]&apos;,</div><div class="line">                //Collapse button selector</div><div class="line">                collapse: &apos;[data-widget=&quot;collapse&quot;]&apos;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;script src=&quot;&lt;%=basePath%&gt;/adminlte/dist/js/app.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;&lt;%=basePath%&gt;/adminlte/dist/js/app.min.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="结合chart-js，显示图标，导出图片"><a href="#结合chart-js，显示图标，导出图片" class="headerlink" title="结合chart.js，显示图标，导出图片"></a>结合chart.js，显示图标，导出图片</h2><p>chart.js 不提供任何方法来导出成图片格式。但是因为 chart.js 使用 Canvas 画布来构建图表，因此可以使用 Canvas 画布的功能来输出图表到图片。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">&lt;a id=&quot;link1&quot; download=&quot;CHARTJS.jpg&quot; class=&quot;btn btn-default btn-xs&quot;&gt;&lt;i class=&quot;fa fa-share-square-o &quot;&gt;&lt;/i&gt;&amp;nbsp;导出&lt;/a&gt;</div><div class="line">&lt;div class=&quot;chart&quot;&gt;</div><div class="line">    &lt;canvas id=&quot;lineChart&quot; style=&quot;height:250px&quot;&gt;&lt;/canvas&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line"></div><div class="line">    $(function () &#123;</div><div class="line">        var lineChartData = &#123;</div><div class="line">            labels: $&#123;hours&#125;,</div><div class="line">            datasets: [</div><div class="line">                &#123;</div><div class="line">                    label: &quot;test1&quot;,</div><div class="line">                    fillColor: &quot;rgba(210, 214, 222, 1)&quot;,</div><div class="line">                    strokeColor: &quot;rgba(210, 214, 222, 1)&quot;,</div><div class="line">                    pointColor: &quot;rgba(210, 214, 222, 1)&quot;,</div><div class="line">                    pointStrokeColor: &quot;#c1c7d1&quot;,</div><div class="line">                    pointHighlightFill: &quot;#fff&quot;,</div><div class="line">                    pointHighlightStroke: &quot;rgba(220,220,220,1)&quot;,</div><div class="line">                    data: $&#123;inCarNums&#125;</div><div class="line">                &#125;</div><div class="line">            ]</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        var lineChartOptions = &#123;</div><div class="line">            // 省略一些配置</div><div class="line">            onAnimationComplete: done  // calls function done() &#123;&#125; at end 重点</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        //-------------</div><div class="line">        //- LINE CHART -</div><div class="line">        //--------------</div><div class="line">        var lineChartCanvas = $(&quot;#lineChart&quot;).get(0).getContext(&quot;2d&quot;);</div><div class="line">        var lineChart = new Chart(lineChartCanvas);</div><div class="line">        lineChart.Line(lineChartData, lineChartOptions);</div><div class="line"></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    function done()&#123;</div><div class="line">        var url_base64jp = document.getElementById(&quot;lineChart&quot;).toDataURL(&quot;image/jpg&quot;);</div><div class="line">        $(&quot;#link1&quot;).attr(&quot;href&quot;, url_base64jp);</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://stackoverflow.com/questions/20206038/converting-chart-js-canvas-chart-to-image-using-todataurl-results-in-blank-im" target="_blank" rel="external">Converting Chart.js canvas chart to image using .toDataUrl() results in blank image</a><br><a href="https://www.codeproject.com/Tips/1120045/Export-Chart-js-Charts-as-Image" target="_blank" rel="external">将 Chart.js 生成的图表导出成图片</a>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这里主要记录使用adminlte时遇到的困难。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://haofangyuan.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="adminlte chartjs" scheme="https://haofangyuan.github.io/tags/adminlte-chartjs/"/>
    
  </entry>
  
  <entry>
    <title>js一些其他问题</title>
    <link href="https://haofangyuan.github.io/2017/08/25/html-js/"/>
    <id>https://haofangyuan.github.io/2017/08/25/html-js/</id>
    <published>2017-08-25T03:56:11.000Z</published>
    <updated>2017-11-15T10:04:46.740Z</updated>
    
    <content type="html"><![CDATA[<p>　　记录网上一些好的解决办法的链接　　<br><a id="more"></a></p>
<h2 id="扫描一个二维码"><a href="#扫描一个二维码" class="headerlink" title="扫描一个二维码"></a>扫描一个二维码</h2><p>扫描一个二维码，android和ios都可以下载app。<br>其中涉及到的点：<br>1、html中要判断是来自android还是ios<br>2、因为一般人使用微信扫一扫，所以，判断若是微信，提示在浏览器中打开。</p>
<h2 id="判断打开来源（浏览器-IOS-Android）"><a href="#判断打开来源（浏览器-IOS-Android）" class="headerlink" title="判断打开来源（浏览器 || IOS || Android）"></a>判断打开来源（浏览器 || IOS || Android）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">var browser = &#123;</div><div class="line">	versions: function() &#123;</div><div class="line">		var u = navigator.userAgent, app = navigator.appVersion;</div><div class="line"></div><div class="line">		var isWeixin =  !!/MicroMessenger/i.test(u);</div><div class="line">		return &#123;//移动终端浏览器版本信息</div><div class="line">			trident: u.indexOf(&apos;Trident&apos;) &gt; -1, //IE内核</div><div class="line">			presto: u.indexOf(&apos;Presto&apos;) &gt; -1, //opera内核</div><div class="line">			webKit: u.indexOf(&apos;AppleWebKit&apos;) &gt; -1, //苹果、谷歌内核</div><div class="line">			gecko: u.indexOf(&apos;Gecko&apos;) &gt; -1 &amp;&amp; u.indexOf(&apos;KHTML&apos;) == -1, //火狐内核</div><div class="line">			mobile: !!u.match(/AppleWebKit.*Mobile.*/) || !!u.match(/AppleWebKit/), //是否为移动终端</div><div class="line">			ios: !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端</div><div class="line">			android: u.indexOf(&apos;Android&apos;) &gt; -1 || u.indexOf(&apos;Linux&apos;) &gt; -1, //android终端或者uc浏览器</div><div class="line">			iPhone: u.indexOf(&apos;iPhone&apos;) &gt; -1 || u.indexOf(&apos;Mac&apos;) &gt; -1, //是否为iPhone或者QQHD浏览器</div><div class="line">			iPad: u.indexOf(&apos;iPad&apos;) &gt; -1, //是否iPad</div><div class="line">			webApp: u.indexOf(&apos;Safari&apos;) == -1 //是否web应该程序，没有头部与底部</div><div class="line">		&#125;;</div><div class="line">	&#125;(),</div><div class="line">	language: (navigator.browserLanguage || navigator.language).toLowerCase()</div><div class="line">&#125;</div><div class="line"></div><div class="line">if (browser.versions.ios || browser.versions.iPhone || browser.versions.iPad) &#123;</div><div class="line">	 // ios</div><div class="line">   window.location = &quot;http://...&quot;;</div><div class="line">&#125;</div><div class="line">else if (browser.versions.android) &#123;</div><div class="line">	 // android</div><div class="line">   // todo: Check if it opens in WeChat, if yes, remind, otherwise jump directly to the download link</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="判断打开来源-微信-支付宝"><a href="#判断打开来源-微信-支付宝" class="headerlink" title="判断打开来源(微信 || 支付宝)"></a>判断打开来源(微信 || 支付宝)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">function isWechat()&#123;</div><div class="line">    var ua = window.navigator.userAgent.toLowerCase();</div><div class="line">    if(ua.match(/MicroMessenger/i) == &apos;micromessenger&apos;)&#123;</div><div class="line">        return true;</div><div class="line">    &#125;else&#123;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">function isAli()&#123;</div><div class="line">    var ua = window.navigator.userAgent.toLowerCase();</div><div class="line">    if(ua.match(/AlipayClient/i) ==&apos;alipayclient&apos;)&#123;</div><div class="line">        return true;</div><div class="line">    &#125;else&#123;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>以下是一些好的文章<br>１、<a href="http://www.blogjava.net/Hopes/articles/388873.html" target="_blank" rel="external">JS怎么刷新当前页面</a><br>2、<a href="http://www.jb51.net/article/60538.htm" target="_blank" rel="external">jQuery中$.click()无效问题分析</a>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　记录网上一些好的解决办法的链接　　&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://haofangyuan.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="https://haofangyuan.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>springboot中的jsp</title>
    <link href="https://haofangyuan.github.io/2017/07/01/springboot-jsp/"/>
    <id>https://haofangyuan.github.io/2017/07/01/springboot-jsp/</id>
    <published>2017-07-01T07:03:11.000Z</published>
    <updated>2017-11-15T10:04:46.800Z</updated>
    
    <content type="html"><![CDATA[<p>主要参考以下链接：<br><a id="more"></a>    </p>
<p>主要参考以下链接：<br><a href="http://www.cnblogs.com/softidea/p/6071630.html" target="_blank" rel="external">Spring boot —- java.lang.NoClassDefFoundError: javax/servlet/ServletContext</a><br><a href="https://github.com/luowei/spring-boot-demo-web-jsp" target="_blank" rel="external">https://github.com/luowei/spring-boot-demo-web-jsp</a></p>
<p><a href="http://blog.csdn.net/alan666156/article/details/52168450" target="_blank" rel="external">http://blog.csdn.net/alan666156/article/details/52168450</a></p>
<p><a href="https://segmentfault.com/a/1190000009726106" target="_blank" rel="external">https://segmentfault.com/a/1190000009726106</a></p>
<p><a href="https://stackoverflow.com/questions/41983864/spring-boot-1-5-1-caches-jsp" target="_blank" rel="external">https://stackoverflow.com/questions/41983864/spring-boot-1-5-1-caches-jsp</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要参考以下链接：&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="https://haofangyuan.github.io/categories/springboot/"/>
    
    
      <category term="springboot" scheme="https://haofangyuan.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>springboot中的jar和dll</title>
    <link href="https://haofangyuan.github.io/2017/07/01/springboot-jar/"/>
    <id>https://haofangyuan.github.io/2017/07/01/springboot-jar/</id>
    <published>2017-07-01T07:03:11.000Z</published>
    <updated>2017-11-15T10:04:46.798Z</updated>
    
    <content type="html"><![CDATA[<p>  参考<br><a id="more"></a>  </p>
<p>主要参考以下链接：<br><a href="http://www.blogjava.net/fancydeepin/archive/2012/06/12/380605.html" target="_blank" rel="external">maven安装本地jar</a><br><code>mvn install:install-file -Dfile=C:/Users/hfy/Desktop/sigar-1.6.5.132.jar -DgroupId=org.hyperic -DartifactId=sigar -Dversion=1.6.5.132 -Dpackaging=jar</code><br><a href="http://blog.csdn.net/mayp1/article/details/53996402" target="_blank" rel="external">Spring Boot引用本地jar包</a><br><a href="https://stackoverflow.com/questions/39513467/spring-boot-executable-tomcat-with-dll" target="_blank" rel="external">springboot加载dll</a>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  参考&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="https://haofangyuan.github.io/categories/springboot/"/>
    
    
      <category term="springboot" scheme="https://haofangyuan.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>springboot + mybatis + 多数据源</title>
    <link href="https://haofangyuan.github.io/2017/07/01/springboot-mybatis-datasource/"/>
    <id>https://haofangyuan.github.io/2017/07/01/springboot-mybatis-datasource/</id>
    <published>2017-07-01T07:03:11.000Z</published>
    <updated>2017-07-01T07:03:34.550Z</updated>
    
    <content type="html"><![CDATA[<p> springboot + mybatis + 多数据源 <a href="http://www.cnblogs.com/java-zhao/p/5413845.html" target="_blank" rel="external">http://www.cnblogs.com/java-zhao/p/5413845.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; springboot + mybatis + 多数据源 &lt;a href=&quot;http://www.cnblogs.com/java-zhao/p/5413845.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.
    
    </summary>
    
      <category term="springboot" scheme="https://haofangyuan.github.io/categories/springboot/"/>
    
    
      <category term="mybatis" scheme="https://haofangyuan.github.io/tags/mybatis/"/>
    
      <category term="springboot" scheme="https://haofangyuan.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>objectMapper中自定义类型转换</title>
    <link href="https://haofangyuan.github.io/2017/06/30/java-objectMapper/"/>
    <id>https://haofangyuan.github.io/2017/06/30/java-objectMapper/</id>
    <published>2017-06-30T14:56:11.000Z</published>
    <updated>2017-11-15T10:04:46.755Z</updated>
    
    <content type="html"><![CDATA[<p>  自己一些总结<br><a id="more"></a></p>
<h2 id="日期类型转换"><a href="#日期类型转换" class="headerlink" title="日期类型转换"></a>日期类型转换</h2><p>使用mapper.setDateFormat();来设置日期转换<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@Select(&quot;select * from $&#123;tableName&#125;&quot;)</div><div class="line">List&lt;Map&lt;String, Object&gt;&gt; getTableData(@Param(&quot;tableName&quot;) String tableName);</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">List&lt;Map&lt;String, Object&gt;&gt; tableDatas = tableDataMapper.getTableData(&quot;user&quot;);</div><div class="line">for (Map&lt;String, Object&gt; tableData: tableDatas) &#123;</div><div class="line">    ObjectMapper mapper = new ObjectMapper();</div><div class="line">    String data = mapper.writeValueAsString(tableData);</div><div class="line">    System.out.println(data);</div><div class="line">    mapper.setDateFormat(new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;));</div><div class="line">    data = mapper.writeValueAsString(tableData);</div><div class="line">    System.out.println(data);</div><div class="line">    System.out.println(&quot;=============&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="对于byte的处理"><a href="#对于byte的处理" class="headerlink" title="对于byte的处理"></a>对于byte的处理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public static ObjectMapper getObjectMapperForUplink() &#123;</div><div class="line">    ObjectMapper mapper = new ObjectMapper();</div><div class="line">//  mapper.configure(SerializationFeature.INDENT_OUTPUT, true);</div><div class="line">    mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);</div><div class="line">    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,</div><div class="line">            false);</div><div class="line">    // 处理字节</div><div class="line">    SimpleModule simpleModule = new SimpleModule();</div><div class="line">    simpleModule.addSerializer(byte[].class, getByteSerialize());</div><div class="line">    mapper.registerModule(simpleModule);</div><div class="line">    // 处理日期</div><div class="line">    mapper.setDateFormat(new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;));</div><div class="line">    return mapper;</div><div class="line">&#125;</div><div class="line"></div><div class="line">private static JsonSerializer&lt;byte[]&gt; getByteSerialize() &#123;</div><div class="line">    return new JsonSerializer&lt;byte[]&gt;() &#123;</div><div class="line">        @Override</div><div class="line">        public void serialize(byte[] value, JsonGenerator gen, SerializerProvider serializers) throws IOException, JsonProcessingException &#123;</div><div class="line">            gen.writeString(&quot;&quot;);  // 此处可实现字节转成字符串。如压缩等</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>jackson中自定义处理序列化和反序列化 <a href="http://jackyrong.iteye.com/blog/2005323" target="_blank" rel="external">http://jackyrong.iteye.com/blog/2005323</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  自己一些总结&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://haofangyuan.github.io/categories/java/"/>
    
    
      <category term="json" scheme="https://haofangyuan.github.io/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>springboot中的过滤器</title>
    <link href="https://haofangyuan.github.io/2017/06/02/springboot-filter/"/>
    <id>https://haofangyuan.github.io/2017/06/02/springboot-filter/</id>
    <published>2017-06-02T09:52:59.000Z</published>
    <updated>2017-11-17T07:20:04.425Z</updated>
    
    <content type="html"><![CDATA[<p>　　做api项目，各个接口都有对应的权限。所以使用过滤器对各个请求进行过滤。以下是学习的简单总结。<br><a id="more"></a></p>
<h2 id="springboot中使用filter"><a href="#springboot中使用filter" class="headerlink" title="springboot中使用filter  "></a>springboot中使用filter  </h2><p>　　在springboot项目中使用filter，需要注入bean：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">@SpringBootApplication //等同于 @Configuration @EnableAutoConfiguration @ComponentScan</div><div class="line">public class SpringbootFilterDemoApp &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        SpringApplication.run(SpringbootFilterDemoApp.class, args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Bean</div><div class="line">    public FilterRegistrationBean filterRegistrationBean() &#123;</div><div class="line">        FilterRegistrationBean registrationBean = new FilterRegistrationBean();</div><div class="line">        registrationBean.setFilter(new AuthorizationFilter()); // 自己的filter</div><div class="line"></div><div class="line">        List&lt;String&gt; urlPatterns = new ArrayList&lt;&gt;();</div><div class="line">        urlPatterns.add(&quot;/openapi/*&quot;);</div><div class="line">        registrationBean.setUrlPatterns(urlPatterns);</div><div class="line">        return registrationBean;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="过滤器filter"><a href="#过滤器filter" class="headerlink" title="过滤器filter  "></a>过滤器filter  </h2><p>　　以下是自己的filter类。继承Filter接口，对于满足条件的请求，使用filterChain.doFilter(request, response);将连接转发到目的地，不满足，则直接通过response写入错误信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 过滤器：校验接口访问权限</div><div class="line"> */</div><div class="line">public class AuthorizationFilter implements Filter&#123;</div><div class="line"></div><div class="line">    private static final Logger logger = LoggerFactory.getLogger(AuthorizationFilter.class);</div><div class="line"></div><div class="line">    private CheckAuth checkAuth;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void init(FilterConfig filterConfig) throws ServletException &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;</div><div class="line">        // 将请求转换成HttpServletRequest 请求</div><div class="line">        HttpServletRequest req = (HttpServletRequest) servletRequest;</div><div class="line">        HttpServletResponse rsp = (HttpServletResponse) servletResponse;</div><div class="line">        // 取得接口URI</div><div class="line">        String currentURI = req.getRequestURI();</div><div class="line">        // 注入checkAuth对象</div><div class="line">        。。。</div><div class="line">        // 读取请求参数</div><div class="line">        。。。</div><div class="line"></div><div class="line">        if (requestWrapper == null) &#123;</div><div class="line">            strError = &quot;请求方式错误！&quot;;</div><div class="line">        &#125; else &#123;</div><div class="line">            if (&quot;&quot;.equals(accessToken)) &#123;</div><div class="line">                strError = &quot;缺少必要的参数&quot;;</div><div class="line">            &#125; else &#123;</div><div class="line">                // 校验接口权限</div><div class="line">                if (checkAuth.checkAuth(accessToken, currentURI)) &#123;</div><div class="line">                    // Filter 只是链式处理，请求依然转发到目的地址。</div><div class="line">                    filterChain.doFilter(requestWrapper, rsp);</div><div class="line">                    return;</div><div class="line">                &#125; else &#123;</div><div class="line">                    strError = &quot;权限不足&quot;;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        rsp.setCharacterEncoding(&quot;UTF-8&quot;);</div><div class="line">        rsp.setContentType(&quot;application/json; charset=utf-8&quot;);</div><div class="line">        String rspValue = &quot;&quot;;   // 返回错误json信息</div><div class="line">        logger.info(&quot;返回：&#123;&#125;&quot;, rspValue);</div><div class="line">        rsp.getWriter().write(rspValue);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void destroy() &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项  "></a>注意事项  </h2><h3 id="filter中注入对象"><a href="#filter中注入对象" class="headerlink" title="filter中注入对象"></a>filter中注入对象</h3><p>　　filter的加载在servlet之前。所以在Filter中使用@Autowired注入对象CheckAuth肯定会失败。我们可以使用WebApplicationContextUtils来获取对象。(可参考：<a href="http://www.cnblogs.com/JesseV/archive/2009/11/17/1605015.html" target="_blank" rel="external">web.xml 中的listener、 filter、servlet 加载顺序及其详解</a>)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 注入checkAuth对象</div><div class="line">ServletContext sc = req.getSession().getServletContext();</div><div class="line">WebApplicationContext context = WebApplicationContextUtils.getWebApplicationContext(sc);</div><div class="line">if (context != null &amp;&amp; context.getBean(&quot;checkAuth&quot;) != null &amp;&amp; checkAuth == null) &#123;</div><div class="line">    checkAuth = context.getBean(CheckAuth.class);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="流的读取"><a href="#流的读取" class="headerlink" title="流的读取"></a>流的读取</h3><p>　　读取请求参数：对于post请求，我们通过stream流进行读取，但是会发现，直接读取response流中的数据后，使用filterChain.doFilter(requestWrapper, rsp);请求，会报错：没有请求内容。<br>　　因为：<br>　　stream流的意思就是说当你读取之后就无法回到上一次读取的数据。所以说流是单向的。当第一个filter中读取流之后流已经被读完。所以无法继续读取。所以第二个filter中读不到数据。<br>　　为了防止流读取一次后就没有了, 所以需要将流继续写出去。<br>　　下面是对Request的封装。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line">import java.io.BufferedReader;</div><div class="line">import java.io.ByteArrayInputStream;  </div><div class="line">import java.io.IOException;  </div><div class="line">import java.io.InputStreamReader;  </div><div class="line">import java.nio.charset.Charset;  </div><div class="line">import java.util.Enumeration;  </div><div class="line"></div><div class="line">import javax.servlet.ReadListener;</div><div class="line">import javax.servlet.ServletInputStream;</div><div class="line">import javax.servlet.http.HttpServletRequest;</div><div class="line"></div><div class="line">/**</div><div class="line"> * httpServletRequst封装类</div><div class="line"> */</div><div class="line">public class HttpServletRequestWrapper extends</div><div class="line">        javax.servlet.http.HttpServletRequestWrapper &#123;</div><div class="line"></div><div class="line">    private final byte[] body;  </div><div class="line"></div><div class="line">    public HttpServletRequestWrapper(HttpServletRequest request) throws IOException &#123;</div><div class="line">        super(request);</div><div class="line">        body = HttpHelper.getBodyString(request).getBytes(Charset.forName(&quot;UTF-8&quot;));  </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public BufferedReader getReader() throws IOException &#123;</div><div class="line">        return new BufferedReader(new InputStreamReader(getInputStream()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public ServletInputStream getInputStream() throws IOException &#123;</div><div class="line"></div><div class="line">        final ByteArrayInputStream bais = new ByteArrayInputStream(body);</div><div class="line"></div><div class="line">        return new ServletInputStream() &#123;</div><div class="line">            @Override</div><div class="line">            public boolean isFinished() &#123;</div><div class="line">                return false;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public boolean isReady() &#123;</div><div class="line">                return false;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void setReadListener(ReadListener listener) &#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public int read() throws IOException &#123;</div><div class="line">                return bais.read();</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String getHeader(String name) &#123;</div><div class="line">        return super.getHeader(name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Enumeration&lt;String&gt; getHeaderNames() &#123;</div><div class="line">        return super.getHeaderNames();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Enumeration&lt;String&gt; getHeaders(String name) &#123;</div><div class="line">        return super.getHeaders(name);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="request读取数据工具类"><a href="#request读取数据工具类" class="headerlink" title="request读取数据工具类"></a>request读取数据工具类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">import java.io.BufferedReader;</div><div class="line">import java.io.IOException;  </div><div class="line">import java.io.InputStream;  </div><div class="line">import java.io.InputStreamReader;  </div><div class="line">import java.nio.charset.Charset;  </div><div class="line"></div><div class="line">import javax.servlet.ServletRequest;  </div><div class="line"></div><div class="line">public class HttpHelper &#123;  </div><div class="line">    /**</div><div class="line">     * 获取请求Body</div><div class="line">     *</div><div class="line">     * @param request</div><div class="line">     * @return</div><div class="line">     */  </div><div class="line">    public static String getBodyString(ServletRequest request) &#123;  </div><div class="line">        StringBuilder sb = new StringBuilder();  </div><div class="line">        InputStream inputStream = null;  </div><div class="line">        BufferedReader reader = null;  </div><div class="line">        try &#123;  </div><div class="line">            inputStream = request.getInputStream();  </div><div class="line">            reader = new BufferedReader(new InputStreamReader(inputStream, Charset.forName(&quot;UTF-8&quot;)));  </div><div class="line">            String line;</div><div class="line">            while ((line = reader.readLine()) != null) &#123;  </div><div class="line">                sb.append(line);  </div><div class="line">            &#125;  </div><div class="line">        &#125; catch (IOException e) &#123;  </div><div class="line">            e.printStackTrace();  </div><div class="line">        &#125; finally &#123;  </div><div class="line">            if (inputStream != null) &#123;  </div><div class="line">                try &#123;  </div><div class="line">                    inputStream.close();  </div><div class="line">                &#125; catch (IOException e) &#123;  </div><div class="line">                    e.printStackTrace();  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">            if (reader != null) &#123;  </div><div class="line">                try &#123;  </div><div class="line">                    reader.close();  </div><div class="line">                &#125; catch (IOException e) &#123;  </div><div class="line">                    e.printStackTrace();  </div><div class="line">                &#125;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        return sb.toString();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="获取请求参数"><a href="#获取请求参数" class="headerlink" title="获取请求参数"></a>获取请求参数</h3><p>get、post获取请求参数的方式是不一样的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">if (req.getMethod().equals(&quot;POST&quot;)) &#123;</div><div class="line">    requestWrapper = new HttpServletRequestWrapper(req);</div><div class="line">    String reqParamsStr = HttpHelper.getBodyString(requestWrapper);</div><div class="line">    if(reqParamsStr.length() &gt;0) &#123;</div><div class="line">        // 从json字符串获取参数</div><div class="line">        accessToken = &quot;&quot;;</div><div class="line">    &#125;</div><div class="line">&#125; else if (req.getMethod().equals(&quot;GET&quot;)) &#123;</div><div class="line">    requestWrapper = req;</div><div class="line">    String[] tokens = req.getParameterValues(&quot;accessToken&quot;);</div><div class="line">    if (tokens != null &amp;&amp; tokens.length &gt; 0) &#123;</div><div class="line">        accessToken = tokens[0];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　做api项目，各个接口都有对应的权限。所以使用过滤器对各个请求进行过滤。以下是学习的简单总结。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="https://haofangyuan.github.io/categories/springboot/"/>
    
    
      <category term="springboot" scheme="https://haofangyuan.github.io/tags/springboot/"/>
    
      <category term="filter" scheme="https://haofangyuan.github.io/tags/filter/"/>
    
  </entry>
  
  <entry>
    <title>ArrayList的线程安全问题</title>
    <link href="https://haofangyuan.github.io/2017/06/02/java-thread-arraylist/"/>
    <id>https://haofangyuan.github.io/2017/06/02/java-thread-arraylist/</id>
    <published>2017-06-02T05:56:59.000Z</published>
    <updated>2017-11-15T10:04:46.757Z</updated>
    
    <content type="html"><![CDATA[<p>　　ArrayList是不安全的。多个线程对ArrayList操作，会出现问题。<br><a id="more"></a></p>
<h2 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h2><p>　　下面这个demo，主要测试内容：三个线程，一个线程向集合中add数据，一个线程从集合中remove数据，一个线程判断如果集合中有数据，从其中获取数据。运行程序，会报错：越界异常。<br>　　以下是异常图片：<br><img src="http://or8a8is80.bkt.clouddn.com/java_arraylist_thread.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.Collections;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">public class ArrayListThreadTest &#123;</div><div class="line">//    private static List&lt;String&gt; TEST_LIST = new CopyOnWriteArrayList&lt;String&gt;();</div><div class="line">    private static List&lt;String&gt; TEST_LIST = Collections.synchronizedList(new ArrayList&lt;String&gt;());</div><div class="line">//    private static List&lt;String&gt; TEST_LIST = new ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        new Thread(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                while (true) &#123;</div><div class="line">                    try &#123;</div><div class="line">                        Thread.sleep(100);</div><div class="line">                    &#125; catch (InterruptedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                    TEST_LIST.add(&quot;11&quot;);</div><div class="line">                    System.out.println(&quot;Thread1 running&quot;);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line"></div><div class="line">        new Thread(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                while (true) &#123;</div><div class="line">                    try &#123;</div><div class="line">                        Thread.sleep(100);</div><div class="line">                    &#125; catch (InterruptedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                    TEST_LIST.clear();</div><div class="line">                    System.out.println(&quot;Thread2 running&quot;);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line"></div><div class="line">        new Thread(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                while (true) &#123;</div><div class="line">                    try &#123;</div><div class="line">                        Thread.sleep(100);</div><div class="line">                    &#125; catch (InterruptedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    if (TEST_LIST.size() &gt; 0) &#123;</div><div class="line">                        int size = TEST_LIST.size();</div><div class="line">                        System.out.println(size + &quot;====&quot;);</div><div class="line">                        System.out.println(size + &quot;===&quot; + TEST_LIST.get(size-1));</div><div class="line">                    &#125;</div><div class="line">//                    System.out.println(&quot;Thread3 running&quot;);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h2><p>　　演示内容：多个线程向集合arraylist、线程安全的arraylist中添加数据，集合长度不同。<br>　　下面例子则来源于：<a href="http://www.oschina.net/code/snippet_70229_2425" target="_blank" rel="external">http://www.oschina.net/code/snippet_70229_2425</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.Collections;</div><div class="line">import java.util.List;</div><div class="line">import java.util.Random;</div><div class="line"></div><div class="line">// Java语言: ArrayList的线程安全与不安全对比演示</div><div class="line">public class ThreadSafeDemo &#123;</div><div class="line">    public static int demo(final List list, final int testCount) throws InterruptedException &#123;</div><div class="line">        ThreadGroup group = new ThreadGroup(list.getClass().getName() + &quot;@&quot; + list.hashCode());</div><div class="line">        final Random rand = new Random();</div><div class="line"></div><div class="line">        Runnable listAppender = new Runnable() &#123;</div><div class="line">            public void run() &#123;</div><div class="line">                try &#123;</div><div class="line">                    Thread.sleep(rand.nextInt(2));</div><div class="line">                &#125; catch (InterruptedException e) &#123;</div><div class="line">                    return;</div><div class="line">                &#125;</div><div class="line">                list.add(&quot;0&quot;);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        for (int i = 0; i &lt; testCount; i++) &#123;</div><div class="line">            new Thread(group, listAppender, &quot;InsertList-&quot; + i).start();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        while (group.activeCount() &gt; 0) &#123;</div><div class="line">            Thread.sleep(10);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return list.size();</div><div class="line">    &#125;</div><div class="line">    public static void main(String[] args) throws InterruptedException &#123;</div><div class="line">        List unsafeList = new ArrayList();</div><div class="line">        List safeList = Collections.synchronizedList(new ArrayList());</div><div class="line">        final int N = 10000;</div><div class="line">        for (int i = 0; i &lt; 10; i++) &#123;</div><div class="line">            unsafeList.clear();</div><div class="line">            safeList.clear();</div><div class="line">            int unsafeSize = demo(unsafeList, N);</div><div class="line">            int safeSize = demo(safeList, N);</div><div class="line">            System.out.println(&quot;unsafe/safe: &quot; + unsafeSize + &quot;/&quot; + safeSize);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>　　ArrayList是线程不安全的，多线程中，我们可以使用<code>Collections.synchronizedList(list);</code>方法使其转换成安全的。或者我们也可以调用自己写的get、set、remove方法方法，自己方法内部加锁，调用list的get、set、remove方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class TestList &#123;</div><div class="line">    public static List&lt;String&gt; list = new ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    public static void addMessage(String message)&#123;</div><div class="line">        synchronized (TestList.class) &#123;</div><div class="line">            list.add(message);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void getMessage(String message)&#123;</div><div class="line">        synchronized (TestList.class) &#123;</div><div class="line">            if (list.size() &gt; 0) &#123;</div><div class="line">                list.remove(0);    </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　ArrayList是不安全的。多个线程对ArrayList操作，会出现问题。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://haofangyuan.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://haofangyuan.github.io/tags/java/"/>
    
      <category term="thread" scheme="https://haofangyuan.github.io/tags/thread/"/>
    
  </entry>
  
  <entry>
    <title>工具类</title>
    <link href="https://haofangyuan.github.io/2017/06/02/java-util/"/>
    <id>https://haofangyuan.github.io/2017/06/02/java-util/</id>
    <published>2017-06-02T05:56:59.000Z</published>
    <updated>2017-11-15T10:04:46.760Z</updated>
    
    <content type="html"><![CDATA[<p>　　常用的工具类<br><a id="more"></a></p>
<h2 id="date"><a href="#date" class="headerlink" title="date"></a>date</h2><p>获取日期是星期几：<br>　　可以使用SimpleDateFormat：EEEE代表星期；<br>　　另外：MMMM代表中文月份</p>
<h2 id="File"><a href="#File" class="headerlink" title="File"></a>File</h2><p>下载文件并保存在服务器上时，最好使用当前操作系统的分隔符<br>获取方法：private String sepa = java.io.File.separator;</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　常用的工具类&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://haofangyuan.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://haofangyuan.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>网页转图片</title>
    <link href="https://haofangyuan.github.io/2017/06/02/java-html-img/"/>
    <id>https://haofangyuan.github.io/2017/06/02/java-html-img/</id>
    <published>2017-06-02T05:56:59.000Z</published>
    <updated>2017-11-15T10:04:46.750Z</updated>
    
    <content type="html"><![CDATA[<p>  一些总结<br><a id="more"></a></p>
<h2 id="html2image"><a href="#html2image" class="headerlink" title="html2image"></a>html2image</h2><p>示例代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">HtmlImageGenerator imageGenerator = new HtmlImageGenerator();</div><div class="line">String htmlstr = &quot;&lt;div&gt;xxxxxxxxx&lt;/div&gt;&quot;;</div><div class="line">imageGenerator.loadHtml(htmlstr);</div><div class="line">imageGenerator.getBufferedImage();</div><div class="line">imageGenerator.saveAsImage(&quot;d:/hello-world.png&quot;);</div><div class="line">imageGenerator.saveAsHtmlWithMap(&quot;hello-world.html&quot;, &quot;hello-world.png&quot;);</div></pre></td></tr></table></figure></p>
<p>maven:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;com.github.xuwei-k&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;html2image&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;0.1.0&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>
<p>放弃的原因：<br>1、css样式不能写在<code>&lt;style&gt;</code>标签中，不能引用其他css文件，只能写在style属性中。<br>2、对css的支持不好。</p>
<h2 id="cssbox"><a href="#cssbox" class="headerlink" title="cssbox"></a>cssbox</h2><p>官网：<a href="http://cssbox.sourceforge.net/" target="_blank" rel="external">http://cssbox.sourceforge.net/</a><br>示例代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ImageRenderer render = new ImageRenderer();</div><div class="line">String url = &quot;&quot;;</div><div class="line">FileOutputStream out = new FileOutputStream(new File(filePath));</div><div class="line">render.setWindowSize(new Dimension(1080,1920), false);</div><div class="line">render.renderURL(url, out, ImageRenderer.Type.PNG);</div><div class="line">out.close();</div></pre></td></tr></table></figure></p>
<p>maven:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> &lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;net.sf.cssbox&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;cssbox&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;4.12&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>
<p>优点：调用非常简单，能支持较多的css。  </p>
<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>1、部署到测试linux系统，正常，部署到线上linux系统，发现导出的图片中文文字全部不显示。<br>原因：不支持中文字体。（安装字体请看：<a href="https://haofangyuan.github.io/2017/05/11/linux-command/">linux相关知识</a>）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  一些总结&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://haofangyuan.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://haofangyuan.github.io/tags/java/"/>
    
      <category term="html" scheme="https://haofangyuan.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>ajax常见问题</title>
    <link href="https://haofangyuan.github.io/2017/05/24/html-ajax/"/>
    <id>https://haofangyuan.github.io/2017/05/24/html-ajax/</id>
    <published>2017-05-24T12:37:11.000Z</published>
    <updated>2017-11-17T07:23:17.712Z</updated>
    
    <content type="html"><![CDATA[<p>　　这里主要记录用ajax时遇到的问题。<br><a id="more"></a></p>
<h2 id="获取ajax返回结果"><a href="#获取ajax返回结果" class="headerlink" title="获取ajax返回结果"></a>获取ajax返回结果</h2><p>　　ajax是异步的。通常我们在succee、error中获取到后台返回的数据。如果我们想在外面获取呢？这时就需要使用responseText了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">var rspTxt = $.ajax(&#123;</div><div class="line">    async:false,</div><div class="line">    cache:false,</div><div class="line">    type : &quot;POST&quot;,</div><div class="line">    url : &quot;&lt;%=basePath%&gt;test.action&quot;,</div><div class="line">    data : &#123;</div><div class="line">        id: $(&quot;#id&quot;).val()</div><div class="line">    &#125;,</div><div class="line">    success : function(data) &#123;</div><div class="line">        var status = data.status;</div><div class="line">        if(&apos;success&apos; == status)&#123;</div><div class="line">            alert(&quot;成功！&quot;);</div><div class="line">        &#125;else&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    error:function()&#123;</div><div class="line">        alert(&quot;失败！&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;).responseText;</div><div class="line">if(typeof(rspTxt) != &quot;undefined&quot;) &#123;</div><div class="line">    var obj = JSON.parse(rspTxt);</div><div class="line">    if(obj.status == &apos;success&apos;) &#123;</div><div class="line">        // 业务处理</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="access-origin"><a href="#access-origin" class="headerlink" title="access-origin"></a>access-origin</h2><p>　　ajax如果跨域请求，会报错。即：相同主机不同端口、不同主机的访问。此种问题我们需要在服务器端进行配置<br>　　以下是springmvc项目的处理方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">import java.io.IOException;</div><div class="line">import javax.servlet.Filter;</div><div class="line">import javax.servlet.FilterChain;</div><div class="line">import javax.servlet.FilterConfig;</div><div class="line">import javax.servlet.ServletException;</div><div class="line">import javax.servlet.ServletRequest;</div><div class="line">import javax.servlet.ServletResponse;</div><div class="line">import javax.servlet.http.HttpServletResponse;</div><div class="line">import org.springframework.stereotype.Component;</div><div class="line"></div><div class="line">@Component</div><div class="line">public class SimpleCORSFilter implements Filter &#123;</div><div class="line"></div><div class="line">    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException &#123;</div><div class="line">        HttpServletResponse response = (HttpServletResponse) res;</div><div class="line">        response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</div><div class="line">        response.setHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;POST, GET, OPTIONS, DELETE&quot;);</div><div class="line">        response.setHeader(&quot;Access-Control-Max-Age&quot;, &quot;3600&quot;);</div><div class="line">        response.setHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;x-requested-with&quot;);</div><div class="line">        chain.doFilter(req, res);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void init(FilterConfig filterConfig) &#123;&#125;</div><div class="line"></div><div class="line">    public void destroy() &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　以下是springboot项目的处理方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">import io.swagger.annotations.Api;</div><div class="line">import io.swagger.annotations.ApiOperation;</div><div class="line">import org.springframework.web.bind.annotation.*;</div><div class="line">@RestController</div><div class="line">@Api(&quot;测试ajax跨域&quot;)</div><div class="line">@RequestMapping(&quot;ajaxdemo&quot;)</div><div class="line">@CrossOrigin</div><div class="line">public class TestHttpController &#123;</div><div class="line">    // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="ajax请求页面刷新"><a href="#ajax请求页面刷新" class="headerlink" title="ajax请求页面刷新"></a>ajax请求页面刷新</h2><p>　　ajax请求，发现页面闪烁以下，刷新。可以配置<code>global: false</code>来解决<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">    global: false,</div><div class="line">    type : &quot;POST&quot;,</div><div class="line">    url : &quot;&quot;,</div><div class="line">    data : &#123;</div><div class="line">    &#125;,</div><div class="line">    dataType : &quot;json&quot;,</div><div class="line">    success : function(data) &#123;</div><div class="line">    &#125;,</div><div class="line">    error : function() &#123;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="http://www.cnblogs.com/yudar/p/4828987.html" target="_blank" rel="external">spring mvc 跨域请求处理——spring 4.2 以上</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这里主要记录用ajax时遇到的问题。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://haofangyuan.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="ajax" scheme="https://haofangyuan.github.io/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>git常用命令</title>
    <link href="https://haofangyuan.github.io/2017/05/24/git/"/>
    <id>https://haofangyuan.github.io/2017/05/24/git/</id>
    <published>2017-05-24T12:37:11.000Z</published>
    <updated>2017-11-17T07:07:55.045Z</updated>
    
    <content type="html"><![CDATA[<p>　　git常用命令<br><a id="more"></a></p>
<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">1、克隆代码  </div><div class="line">	git clone 地址</div><div class="line">2、查看当前状态</div><div class="line">	git status</div><div class="line">	  状态分为 	</div><div class="line">			&quot;未跟踪&quot; 	Untracked	 未跟踪的文件需要git add 添加之后，执行commit才会保存到版本库中。</div><div class="line">			&quot;已经修改&quot;	modified	执行commit才会保存到版本库中。</div><div class="line">			&quot;已经删除&quot;	deleted		本地删除文件不代表版本库中已经删除，需要执行git rm [文件名]</div><div class="line">3、添加未跟踪文件</div><div class="line">	git add [文件名]</div><div class="line">  	注意：不要git add . 这样会让eclipse生成的文件也add进去。 使用add *</div><div class="line">		使用 `git add *.java, *.jsp`</div><div class="line">4、提交代码</div><div class="line">	git commit [文件名] -m &quot;注释&quot;			</div><div class="line">5、从版本库拉代码</div><div class="line">	git pull</div><div class="line">6、代码提交到版本库</div><div class="line">	git push</div><div class="line"></div><div class="line">7、查看文件修改情况</div><div class="line">		git diff [文件名]	如果不加文件名，会将所有已经修改的文件与版本库进行比较</div><div class="line"></div><div class="line">8、回滚</div><div class="line">	git reset [--hard] [--mixed]</div><div class="line">	[--hard] 是强制抹除修改，未提交的修改会丢失。	git reset --hard #######慎重使用#####</div><div class="line">	[--mixed] 是保存修改，相当于重新提交。</div><div class="line"></div><div class="line">9、rebase</div><div class="line">	git rebase [分支名]  //一般基于origin/master rebase 	即 git rebase origin/master</div><div class="line">	本次提交后，从版本库拉去代码，别人也修改了。此时两者不在一条线上，rebase合并。</div><div class="line">		出现冲突时，</div><div class="line">		1、查看那些文件冲突： git status</div><div class="line">		2、修改：</div><div class="line">		3、将冲突文件修改后添加：git add 文件名</div><div class="line">		4、git rebase --continue</div><div class="line"></div><div class="line">10、图形界面工具</div><div class="line">	gitk --all</div></pre></td></tr></table></figure>
<h2 id="修改撤回"><a href="#修改撤回" class="headerlink" title="修改撤回"></a>修改撤回</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git diff &gt; tmp.diff			//修改内容暂存置tmp.diff</div><div class="line">git reset --hard			  //去除修改</div><div class="line">rm -f tmp.diff				  //删除tmp.diff</div></pre></td></tr></table></figure>
<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">1、查看本地分支</div><div class="line">		git branch  </div><div class="line">		* dev  </div><div class="line">		  master  </div><div class="line">		*代表当前位于dev分支</div><div class="line"></div><div class="line">2、查看远程分支</div><div class="line">		git branch -r</div><div class="line">		  origin/dev  </div><div class="line">		  origin/master  </div><div class="line"></div><div class="line">3、查看本地和远程分支</div><div class="line">		git branch -a</div><div class="line"></div><div class="line">4、创建分支</div><div class="line">		git checkout -b new_branch  </div><div class="line">		注意，new_branch的代码来自于当前分支</div><div class="line"></div><div class="line">5、切换分支</div><div class="line">		git checkout another_branch  </div><div class="line">		和创建分支就差-b参数</div><div class="line"></div><div class="line">6、push本地分支代码到远端服务器</div><div class="line">		git push origin branch_name  </div><div class="line">		如果远端服务器没有该分支，将会自动创建</div><div class="line"></div><div class="line">7、pull远端分支代码到本地对应分支</div><div class="line">		git pull origin branch_name  </div><div class="line"></div><div class="line">8、删除本地分支,首先切换到别的分支,然后才能删除某个分支</div><div class="line">		git checkout b  </div><div class="line">		git branch -d a  </div><div class="line"></div><div class="line">9、删除远程分支</div><div class="line">		git push origin --delete branch_name  </div><div class="line"></div><div class="line">10、合并本地分支b4.5到master上：</div><div class="line">		git checkout master</div><div class="line">		git merger b4.5     将本地的b4.5分支代码合并到当前分支master中</div><div class="line">		出现冲突:</div><div class="line">			1、修改冲突文件</div><div class="line">			2、git add             </div><div class="line">			3、git commit</div><div class="line"></div><div class="line">11、合并远程分支，和前面的几乎一样，</div><div class="line">		git merge origin/b  </div><div class="line">		远程分支b被合并到本地当前分支dev中了。</div><div class="line"></div><div class="line">12、重命名分支：</div><div class="line">		git branch -m &lt;old_name&gt; &lt;new_name&gt; (如果有同名会失败，改用 -M 可以强制覆盖)</div></pre></td></tr></table></figure>
<h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">1、查看本地标签：</div><div class="line">		git tag</div><div class="line"></div><div class="line">2、推送所有标签：</div><div class="line">		git push --tags</div><div class="line"></div><div class="line">3、删除本地标签：</div><div class="line">		git tag -d 标签名</div><div class="line"></div><div class="line">4、删除远程标签：</div><div class="line">		git push origin --delete tag 标签名</div></pre></td></tr></table></figure>
<h2 id="文件追踪问题"><a href="#文件追踪问题" class="headerlink" title="文件追踪问题"></a>文件追踪问题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">如果我们不小心将某个文件加入了 git 版本控制，但是突然又不想继续跟踪控制这个文件了，怎么办呢？</div><div class="line">使用 git update-index 即可。</div><div class="line">不想继续追踪某个文件</div><div class="line">git update-index --assume-unchanged your_file_path</div><div class="line">如果想再次继续跟踪某个文件</div><div class="line">git update-index --no-assume-unchanged your_file_path</div></pre></td></tr></table></figure>
<h2 id="windows-gitk-乱码"><a href="#windows-gitk-乱码" class="headerlink" title="windows gitk 乱码"></a>windows gitk 乱码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">vi .gitconfig。 或者打开C:\Users\cage\.gitconfig文件</div><div class="line">在文件末尾加上：</div><div class="line">[gui]</div><div class="line">    encoding = utf-8</div></pre></td></tr></table></figure>
<h2 id="某次提交合并到分支上"><a href="#某次提交合并到分支上" class="headerlink" title="某次提交合并到分支上"></a>某次提交合并到分支上</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">将分支b2上的某次提交合并到分支b1上。</div><div class="line">1、b2分支上：查看commit号</div><div class="line">		git log</div><div class="line">2、切换到b1分支</div><div class="line">		git checkout b1</div><div class="line">		git cherry-pick ef895d2b76610d9c41e901e09e4c483a132870e2</div><div class="line">3、出现冲突，解决后使用</div><div class="line">		git cherry-pick --continue</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　git常用命令&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="https://haofangyuan.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://haofangyuan.github.io/tags/git/"/>
    
  </entry>
  
</feed>
