<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hfy Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://haofangyuan.github.io/"/>
  <updated>2018-01-12T03:44:22.206Z</updated>
  <id>https://haofangyuan.github.io/</id>
  
  <author>
    <name>hfy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TCP/IP TIME_WAIT过多</title>
    <link href="https://haofangyuan.github.io/2018/01/12/time_wait/"/>
    <id>https://haofangyuan.github.io/2018/01/12/time_wait/</id>
    <published>2018-01-12T10:37:11.000Z</published>
    <updated>2018-01-12T03:44:22.206Z</updated>
    
    <content type="html"><![CDATA[<p>  TCP/IP TIME_WAIT状态原理和服务端过多原因分析，及解决方案。<br><a id="more"></a><br>分解：<br><a href="http://lib.csdn.net/article/computernetworks/17275" target="_blank" rel="external">http://lib.csdn.net/article/computernetworks/17275</a><br><a href="http://blog.csdn.net/bk_guo/article/details/53995399" target="_blank" rel="external">http://blog.csdn.net/bk_guo/article/details/53995399</a><br>windows下解决：<br><a href="http://www.cnblogs.com/doNetTom/p/5160709.html" target="_blank" rel="external">http://www.cnblogs.com/doNetTom/p/5160709.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  TCP/IP TIME_WAIT状态原理和服务端过多原因分析，及解决方案。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://haofangyuan.github.io/categories/java/"/>
    
    
      <category term="exception" scheme="https://haofangyuan.github.io/tags/exception/"/>
    
  </entry>
  
  <entry>
    <title>wrapper的使用</title>
    <link href="https://haofangyuan.github.io/2018/01/12/wrapper/"/>
    <id>https://haofangyuan.github.io/2018/01/12/wrapper/</id>
    <published>2018-01-12T10:37:11.000Z</published>
    <updated>2018-01-12T03:46:19.593Z</updated>
    
    <content type="html"><![CDATA[<p>　　windows平台下，jar包开机自启动好配置，可会有命令行窗口运行在界面上，容易不小心关闭。wrapper可以实现。<br><a id="more"></a><br><a href="Wrapper配置详解及高级应用">Wrapper配置详解及高级应用</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　windows平台下，jar包开机自启动好配置，可会有命令行窗口运行在界面上，容易不小心关闭。wrapper可以实现。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://haofangyuan.github.io/categories/java/"/>
    
    
      <category term="exception" scheme="https://haofangyuan.github.io/tags/exception/"/>
    
  </entry>
  
  <entry>
    <title>thrift学习</title>
    <link href="https://haofangyuan.github.io/2017/12/06/thrift/"/>
    <id>https://haofangyuan.github.io/2017/12/06/thrift/</id>
    <published>2017-12-06T14:56:11.000Z</published>
    <updated>2017-12-14T07:39:35.070Z</updated>
    
    <content type="html"><![CDATA[<p>自己一些总结<br><a id="more"></a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Thrift是Facebook的一个开源项目，用于RPC通信，C/S结构，跨语言的IDL（Interface Description Language）。  </p>
<h2 id="Thrift安装"><a href="#Thrift安装" class="headerlink" title="Thrift安装"></a>Thrift安装</h2><p>1、windows安装：从 <a href="http://thrift.apache.org/download" target="_blank" rel="external">http://thrift.apache.org/download</a> 下载thrift-0.10.0.exe，然后重命名为thrift.exe,放到任意目录下（如：E:\thrift\0.10.0）,将目录添加到环境变量中。cmd中执行thrift -version。<br>2、IDEA安装插件：插件安装完成，打开File-&gt;settings-&gt;Thrift compiler，(1)填写Thrift executable: thrift,(2)勾选Allow negative field keys。<br>3、maven项目：打开File-&gt;Project Structure-&gt;Facets,添加Thrift，右边添加java，设置输出目录。<br>参考：<a href="http://blog.csdn.net/haluoluo211/article/details/53786381" target="_blank" rel="external">http://blog.csdn.net/haluoluo211/article/details/53786381</a></p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>1、<a href="https://www.ibm.com/developerworks/cn/java/j-lo-apachethrift/index.html" target="_blank" rel="external">Apache Thrift - 可伸缩的跨语言服务开发框架</a><br>2、<a href="http://www.micmiu.com/soa/rpc/thrift-sample/" target="_blank" rel="external">Thrift入门及Java实例演示</a></p>
<p>阻塞式：<br>　服务端：（单线程TSimpleServer、多线程TThreadPoolServer）<br>非阻塞式：<br>　服务端服务模型：（TNonblockingServer、半同步半异步THsHaServer）<br>　客户端还支持：异步客户端<br>　服务端和客户端需要指定 TFramedTransport 数据传输的方式</p>
<h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><h3 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h3><p><a href="http://blog.csdn.net/lansebolangcjl/article/details/52788198" target="_blank" rel="external">Thrift客户端连接池设计</a><br><a href="http://blog.csdn.net/zhu_tianwei/article/details/44003287" target="_blank" rel="external">实现Thrift客户端连接池</a><br><a href="http://blog.csdn.net/dream_lixiang/article/details/54603374" target="_blank" rel="external">thrift无法判断连接失效的原因与解决方案</a>  </p>
<p>[Thrift连接池，spring配置化，透明化调用（优化2）]<a href="http://blog.csdn.net/zjs40/article/details/63265407" target="_blank" rel="external">http://blog.csdn.net/zjs40/article/details/63265407</a>  </p>
<h3 id="双向通信"><a href="#双向通信" class="headerlink" title="双向通信"></a>双向通信</h3><p>[双向异步远程调用]<a href="http://blog.csdn.net/qq_27989757/article/details/50725973" target="_blank" rel="external">http://blog.csdn.net/qq_27989757/article/details/50725973</a><br><a href="http://www.bkjia.com/Javabc/1173043.html" target="_blank" rel="external">http://www.bkjia.com/Javabc/1173043.html</a>  </p>
<p><a href="http://blog.csdn.net/june905206961/article/details/54890460" target="_blank" rel="external">http://blog.csdn.net/june905206961/article/details/54890460</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://blog.jobbole.com/92290/" target="_blank" rel="external">你应该知道的 RPC 原理</a>  </p>
<p><a href="http://m.blog.csdn.net/dream_lixiang/article/details/54603374" target="_blank" rel="external">http://m.blog.csdn.net/dream_lixiang/article/details/54603374</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己一些总结&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://haofangyuan.github.io/categories/java/"/>
    
    
      <category term="thrift" scheme="https://haofangyuan.github.io/tags/thrift/"/>
    
  </entry>
  
  <entry>
    <title>bootstrap</title>
    <link href="https://haofangyuan.github.io/2017/11/26/bootstrap/"/>
    <id>https://haofangyuan.github.io/2017/11/26/bootstrap/</id>
    <published>2017-11-26T12:37:11.000Z</published>
    <updated>2018-01-30T02:59:05.391Z</updated>
    
    <content type="html"><![CDATA[<p>　　这里主要记录前端页面的问题。<br><a id="more"></a><br>　　要写个官网，好吧，此处简单记录下。</p>
<h3 id="简单css"><a href="#简单css" class="headerlink" title="简单css"></a>简单css</h3><p>1、透明：rgba(255, 135, 36, 0.9)<br>2、垂直居中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.center-vertical &#123;</div><div class="line">  position: relative;</div><div class="line">  top: 50%;</div><div class="line">  transform: translateY(-50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、背景图片：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.bg-img &#123;</div><div class="line">  background: url(../images/banner-about.png);</div><div class="line">  background-position: center 0;  /*屏小，背景居中*/</div><div class="line">  background-repeat: no-repeat; /*背景图像将仅显示一次，不重复*/</div><div class="line">  background-attachment: fixed; /*设置固定的背景图像*/</div><div class="line">  background-size: cover;</div><div class="line">  -webkit-background-size: cover;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4、公司发展历程（台阶上坡式）：使用bootstrap的列偏移：<a href="http://v3.bootcss.com/css/" target="_blank" rel="external">http://v3.bootcss.com/css/</a>  </p>
<h3 id="滚动翻页"><a href="#滚动翻页" class="headerlink" title="滚动翻页"></a>滚动翻页</h3><p>整个界面分N屏，垂直滚动。示例：<a href="http://www.swiper.com.cn/demo/090-vertical.html" target="_blank" rel="external">http://www.swiper.com.cn/demo/090-vertical.html</a> ， 使用的是swiper4：<a href="http://www.swiper.com.cn/" target="_blank" rel="external">http://www.swiper.com.cn/</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var mySwiper = new Swiper(&apos;.swiper-container&apos;, &#123;</div><div class="line">  direction: &apos;vertical&apos;,</div><div class="line">  mousewheel: true,</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="返回顶部"><a href="#返回顶部" class="headerlink" title="返回顶部"></a>返回顶部</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 第一种 --&gt;</div><div class="line">&lt;a href=&quot;javascript:void(0);&quot; onclick=&quot;slideToTop();&quot;&gt;&lt;i class=&quot;fa fa-arrow-up&quot;&gt;&lt;/i&gt;&lt;/a&gt;</div><div class="line">function slideToTop() &#123;</div><div class="line">    mySwiper.slideTo(0, 1000, false); //切换到第一个slide，速度为1秒</div><div class="line">&#125;</div><div class="line">&lt;!-- 第二种 --&gt;</div><div class="line">&lt;a href=&quot;javascript:scroll(0,0)&quot;&gt;&lt;i class=&quot;fa fa-arrow-up&quot;&gt;&lt;/i&gt;&lt;/a&gt;</div></pre></td></tr></table></figure>
<h3 id="图片动态"><a href="#图片动态" class="headerlink" title="图片动态"></a>图片动态</h3><p>1、鼠标移至图片上，下方展开内容。使用slideUp()，slideDown();<br>2、图片底部透明遮罩文字标题效果：<a href="http://www.qdxw.net/xwhtml/559.html" target="_blank" rel="external">http://www.qdxw.net/xwhtml/559.html</a>  </p>
<h3 id="背景图满屏"><a href="#背景图满屏" class="headerlink" title="背景图满屏"></a>背景图满屏</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;meta charset=&quot;UTF-8&quot; http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</div><div class="line">&lt;title&gt;背景图宽度高度满屏&lt;/title&gt;</div><div class="line">&lt;style&gt;</div><div class="line">.index_bgimg&#123;</div><div class="line">    width: 100%;</div><div class="line">    height: 100%;</div><div class="line">    /*height: 1079px;*/</div><div class="line">    background: url(../img/bg_img.png);</div><div class="line">    background-position: center 0;  /*屏小，背景居中*/</div><div class="line">    background-repeat: no-repeat; /*背景图像将仅显示一次，不重复*/</div><div class="line">    background-attachment: fixed; /*设置固定的背景图像*/</div><div class="line">    background-size: cover;</div><div class="line">    -webkit-background-size: cover;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;body&gt;  </div><div class="line">	&lt;!--</div><div class="line">		&lt;div id=&quot;Layer1&quot; style=&quot;position:absolute; left:0px; top:0px; width:100%; height:100%&quot;&gt;  </div><div class="line">			&lt;img src=&quot;1.png&quot; width=&quot;100%&quot; height=&quot;100%&quot;/&gt;  </div><div class="line">		&lt;/div&gt;</div><div class="line">	--&gt;  </div><div class="line">	&lt;div id=&quot;Layer1&quot; style=&quot;position:absolute; left:0px; top:0px; width:100%; height:100%&quot;&gt;</div><div class="line">		&lt;div class=&quot;index_bgimg&quot; width=&quot;100%&quot; height=&quot;100%&quot;&gt;</div><div class="line">	&lt;/div&gt;</div><div class="line">&lt;/div&gt;  	</div><div class="line">&lt;/body&gt;  </div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="滚动条样式"><a href="#滚动条样式" class="headerlink" title="滚动条样式"></a>滚动条样式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">*&#123;</div><div class="line">    scrollbar-face-color:rgba(0,0,0,0.2); !*面子*!</div><div class="line">    scrollbar-arrow-color:rgba(0,0,0,0.2); !*箭头*!</div><div class="line">    scrollbar-3dlight-color:rgba(0,0,0,0.2); !*最外左*!</div><div class="line">    scrollbar-highlight-color:rgba(0,0,0,0.2); !*左二*!</div><div class="line">    scrollbar-shadow-color:rgba(0,0,0,0.2); !*右二*!</div><div class="line">    scrollbar-darkshadow-color:rgba(0,0,0,0.2); !*右一*!</div><div class="line">    scrollbar-track-color:rgba(0,0,0,0.2); !*滑道*!</div><div class="line">&#125;</div><div class="line"></div><div class="line">!*滚动条整体*!</div><div class="line">::-webkit-scrollbar&#123;</div><div class="line">    width: 4px;     !*高宽分别对应横竖滚动条的尺寸*!</div><div class="line">    height: 4px;</div><div class="line">&#125;</div><div class="line">!*滚动条按钮*!</div><div class="line">::-webkit-scrollbar-button &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">::-webkit-scrollbar-track&#123;</div><div class="line">    -webkit-box-shadow: inset 0 0 5px rgba(0,0,0,0.2);</div><div class="line">    border-radius: 0;</div><div class="line">    background: rgba(0,0,0,0.2);</div><div class="line">&#125;</div><div class="line">::-webkit-scrollbar-track-piece&#123;</div><div class="line">    background-color:rgba(0,0,0,0.2);  !*滑道*!</div><div class="line">    -webkit-border-radius:4px; !*滑道圆角宽度*!</div><div class="line">&#125;</div><div class="line">::-webkit-scrollbar-thumb&#123;</div><div class="line">    border-radius: 5px;</div><div class="line">    -webkit-box-shadow: inset 0 0 5px rgba(0,0,0,0.2);</div><div class="line">    background: rgba(0,0,0,0.2);</div><div class="line">    !*background-color:#F3F3F3; !*滑动条表面*!*!</div><div class="line">    !*border:solid 1px #C0C0C0; !*滑动条边框*!*!</div><div class="line">    !*border-radius:4px;  !*滑动条圆角宽度*!*!</div><div class="line">&#125;</div><div class="line">!*横竖滚动条交角*!</div><div class="line">::-webkit-scrollbar-corner &#123;</div><div class="line">    background-color: rgba(0,0,0,0.2);</div><div class="line">&#125;</div><div class="line">!*横竖滚动条交角图案*!</div><div class="line">::-webkit-resizer &#123;</div><div class="line">    !*background-image: url(/public/img/resizer-inactive.png);*!</div><div class="line">    background-repeat: no-repeat;</div><div class="line">    background-position: bottom right;</div><div class="line">&#125;</div><div class="line">!*鼠标滑过滑动条*!</div><div class="line">::-webkit-scrollbar-thumb:hover&#123;</div><div class="line">    background-color:rgba(0,0,0,0.2);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这里主要记录前端页面的问题。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://haofangyuan.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="html" scheme="https://haofangyuan.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>springboot源码学习</title>
    <link href="https://haofangyuan.github.io/2017/11/20/springboot-source/"/>
    <id>https://haofangyuan.github.io/2017/11/20/springboot-source/</id>
    <published>2017-11-20T12:37:11.000Z</published>
    <updated>2017-11-21T02:41:26.239Z</updated>
    
    <content type="html"><![CDATA[<p>　　springboot源码学习<br><a id="more"></a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://zhaox.github.io/java/2016/03/22/spring-boot-start-flow" target="_blank" rel="external">http://zhaox.github.io/java/2016/03/22/spring-boot-start-flow</a><br><a href="http://www.cnblogs.com/davidwang456/p/5846513.html" target="_blank" rel="external">http://www.cnblogs.com/davidwang456/p/5846513.html</a><br><a href="http://www.majunwei.com/view/201708262210563675.html" target="_blank" rel="external">http://www.majunwei.com/view/201708262210563675.html</a>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　springboot源码学习&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="https://haofangyuan.github.io/categories/springboot/"/>
    
    
      <category term="springboot" scheme="https://haofangyuan.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>protobuf的学习</title>
    <link href="https://haofangyuan.github.io/2017/11/16/protobuf/"/>
    <id>https://haofangyuan.github.io/2017/11/16/protobuf/</id>
    <published>2017-11-16T10:56:11.000Z</published>
    <updated>2018-01-05T10:32:53.094Z</updated>
    
    <content type="html"><![CDATA[<p>　　开始学习pb了，来些总结吧！<br><a id="more"></a><br>本人github上本内容相关的项目：<br>　　springboot+protobuf<br>　　springboot+protobuf+websocket<br>接口设计：<br>　我的Protobuf消息设计原则 <a href="https://my.oschina.net/cxh3905/blog/159122" target="_blank" rel="external">https://my.oschina.net/cxh3905/blog/159122</a><br>　我的Protobuf消息设计原则(续)–实践  <a href="https://my.oschina.net/cxh3905/blog/293000" target="_blank" rel="external">https://my.oschina.net/cxh3905/blog/293000</a>  </p>
<h2 id="Json转换"><a href="#Json转换" class="headerlink" title="Json转换"></a>Json转换</h2><h3 id="protobuf转json"><a href="#protobuf转json" class="headerlink" title="protobuf转json"></a>protobuf转json</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">import com.google.protobuf.Descriptors;</div><div class="line">import com.googlecode.protobuf.format.JsonFormat;</div><div class="line"></div><div class="line">import java.io.IOException;</div><div class="line"></div><div class="line">/**</div><div class="line"> * JsonFormat的子类，不打印图片数据</div><div class="line"> *</div><div class="line"> * 直接使用com.googlecode.protobuf.format.JsonFormat的方法：</div><div class="line"> * new JsonFormat().printToString(message);</div><div class="line"> * 来打印，会将图片也打印出来，下面方法过滤了图片数据。</div><div class="line"> * new MyJsonFormat().printToString(message);</div><div class="line"> *</div><div class="line"> * Created by hfy on 2018/1/5.</div><div class="line"> */</div><div class="line">public class MyJsonFormat extends JsonFormat &#123;</div><div class="line">    @Override</div><div class="line">    public void printField(Descriptors.FieldDescriptor field, Object value, JsonGenerator generator) throws IOException &#123;</div><div class="line">        if (field.getType() == Descriptors.FieldDescriptor.Type.BYTES) &#123;</div><div class="line">            generator.print(&quot;\&quot;&quot;);</div><div class="line">            generator.print(&quot;image data...&quot;);</div><div class="line">            generator.print(&quot;\&quot;&quot;);</div><div class="line">        &#125; else &#123;</div><div class="line">            super.printField(field, value, generator);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://blog.csdn.net/u010939285/article/details/78538927" target="_blank" rel="external">protobuf 和 intellij 配置使用</a><br><a href="http://colobu.com/2015/01/07/Protobuf-language-guide/" target="_blank" rel="external">Protobuf 语法指南</a><br><a href="http://blog.csdn.net/z69183787/article/details/52610138" target="_blank" rel="external">httpclient ＋protobuf 实现数据传输</a>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　开始学习pb了，来些总结吧！&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="protobuf" scheme="https://haofangyuan.github.io/categories/protobuf/"/>
    
    
      <category term="protobuf" scheme="https://haofangyuan.github.io/tags/protobuf/"/>
    
  </entry>
  
  <entry>
    <title>springboot异常</title>
    <link href="https://haofangyuan.github.io/2017/10/27/springboot-exception/"/>
    <id>https://haofangyuan.github.io/2017/10/27/springboot-exception/</id>
    <published>2017-10-27T12:37:11.000Z</published>
    <updated>2017-11-17T10:34:26.894Z</updated>
    
    <content type="html"><![CDATA[<p>　　spring boot 项目遇到的一些问题<br><a id="more"></a></p>
<h2 id="项目假死"><a href="#项目假死" class="headerlink" title="项目假死"></a>项目假死</h2><p>问题描述：<br>　　在linux服务器中，springboot项目运行一段时间后，ps -ef|grep java发现项目进程在，但是打开日志，请求项目接口，发现服务器没有反应，好像死了一样。什么原因呢？<br>解决：<br>　　问题出现后，通过 <code>jstack 进程id</code> 发现，出现了死锁问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">JNI global references: 296</div><div class="line"></div><div class="line"></div><div class="line">Found one Java-level deadlock:</div><div class="line">=============================</div><div class="line">&quot;http-nio-8889-exec-34&quot;:</div><div class="line">  waiting to lock monitor 0x00007fe2c45001d8 (object 0x0000000086bef5e8, a com.hfy.service.impl.SessionServiceImpl),</div><div class="line">  which is held by &quot;SockJS-1&quot;</div><div class="line">&quot;SockJS-1&quot;:</div><div class="line">  waiting to lock monitor 0x00007fe2d424ec98 (object 0x0000000086bef5c8, a com.hfy.service.impl.TokenServiceImpl),</div><div class="line">  which is held by &quot;SockJS-2&quot;</div><div class="line">&quot;SockJS-2&quot;:</div><div class="line">  waiting to lock monitor 0x00007fe2c45001d8 (object 0x0000000086bef5e8, a com.hfy.service.impl.SessionServiceImpl),</div><div class="line">  which is held by &quot;SockJS-1&quot;</div><div class="line"></div><div class="line">Java stack information for the threads listed above:</div><div class="line">===================================================</div><div class="line">&quot;http-nio-8889-exec-34&quot;:</div><div class="line">	at com.hfy.service.impl.SessionServiceImpl.keepAlive(SessionServiceImpl.java:114)</div><div class="line">	- waiting to lock &lt;0x0000000086bef5e8&gt; (a com.hfy.service.impl.SessionServiceImpl)</div><div class="line">	at com.hfy.PmWebSocketHandler.handleTextMessage(PmWebSocketHandler.java:85)</div><div class="line">	- locked &lt;0x00000000d8ca01c8&gt; (a org.springframework.web.socket.adapter.standard.StandardWebSocketSession)</div><div class="line">	............</div><div class="line">&quot;SockJS-1&quot;:</div><div class="line">	at com.hfy.service.impl.TokenServiceImpl.deleteToken(TokenServiceImpl.java:49)</div><div class="line">	- waiting to lock &lt;0x0000000086bef5c8&gt; (a com.hfy.service.impl.TokenServiceImpl)</div><div class="line">	............</div><div class="line">	at com.hfy.service.impl.SessionServiceImpl.sessionTimeout(SessionServiceImpl.java:96)</div><div class="line">	- locked &lt;0x0000000086bef5e8&gt; (a com.hfy.service.impl.SessionServiceImpl)</div><div class="line">	at com.hfy.service.ScheduleTask.sessionTimeout(ScheduleTask.java:75)</div><div class="line">	.......</div><div class="line">&quot;SockJS-2&quot;:</div><div class="line">	at com.hfy.service.impl.SessionServiceImpl.deleteSession(SessionServiceImpl.java:47)</div><div class="line">	- waiting to lock &lt;0x0000000086bef5e8&gt; (a com.hfy.service.impl.SessionServiceImpl)</div><div class="line">	............</div><div class="line">	at com.hfy.service.impl.TokenServiceImpl.tokenTimeout(TokenServiceImpl.java:80)</div><div class="line">	- locked &lt;0x0000000086bef5c8&gt; (a com.hfy.service.impl.TokenServiceImpl)</div><div class="line">	at com.hfy.service.ScheduleTask.tokenTimeout(ScheduleTask.java:69)</div><div class="line">	.......</div><div class="line"></div><div class="line">Found 1 deadlock.</div></pre></td></tr></table></figure></p>
<p>可以很清楚的看到：<br>　　“SockJS-2”:<br>　　TokenServiceImpl.java:80执行tokenTimeout()的时候，获得了锁<0x0000000086bef5c8>,方法执行到了SessionServiceImpl.java:47,执行deleteSession时，等待锁<0x0000000086bef5e8><br>　　“SockJS-1”:<br>　　SessionServiceImpl.java:96执行sessionTimeout()的时候，获得了锁<0x0000000086bef5e8>,方法执行到了TokenServiceImpl.java:49，执行deleteToken时，等待锁<0x0000000086bef5c8><br>　　典型的死锁，知道问题所在，解决去了。。。。。。</0x0000000086bef5c8></0x0000000086bef5e8></0x0000000086bef5e8></0x0000000086bef5c8></p>
<h2 id="Tomcat一个BUG造成CLOSE-WAIT"><a href="#Tomcat一个BUG造成CLOSE-WAIT" class="headerlink" title="Tomcat一个BUG造成CLOSE_WAIT"></a>Tomcat一个BUG造成CLOSE_WAIT</h2><p>此问题还未遇见<br><a href="http://cxytiandi.com/blog/detail/11147" target="_blank" rel="external">http://cxytiandi.com/blog/detail/11147</a><br><a href="http://www.cnblogs.com/saaav/p/6258831.html" target="_blank" rel="external">http://www.cnblogs.com/saaav/p/6258831.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　spring boot 项目遇到的一些问题&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="https://haofangyuan.github.io/categories/springboot/"/>
    
    
      <category term="springboot" scheme="https://haofangyuan.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>springboot一些额外的知识</title>
    <link href="https://haofangyuan.github.io/2017/10/26/springboot_extra/"/>
    <id>https://haofangyuan.github.io/2017/10/26/springboot_extra/</id>
    <published>2017-10-26T14:56:11.000Z</published>
    <updated>2017-11-17T08:59:37.994Z</updated>
    
    <content type="html"><![CDATA[<p>　　自己一些总结<br><a id="more"></a></p>
<h2 id="修改网站小图标"><a href="#修改网站小图标" class="headerlink" title="修改网站小图标"></a>修改网站小图标</h2><p>1、在<code>application.properties</code>中配：<code>spring.mvc.favicon.enabled = false</code><br>2、网站图片命名为<code>favicon.ico</code>;<br>3、将<code>favicon.ico</code>放在<code>resources/static</code>目录下；<br>4、ok，结束ヾ(◍°∇°◍)ﾉﾞ</p>
<h2 id="启动彩蛋"><a href="#启动彩蛋" class="headerlink" title="启动彩蛋"></a>启动彩蛋</h2><p>springboot项目启动总会打印一下内容，想要更换怎么办？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.   ____          _            __ _ _</div><div class="line">/\\ / ___&apos;_ __ _ _(_)_ __  __ _ \ \ \ \</div><div class="line">( ( )\___ | &apos;_ | &apos;_| | &apos;_ \/ _` | \ \ \ \</div><div class="line">\\/  ___)| |_)| | | | | || (_| |  ) ) ) )</div><div class="line">&apos;  |____| .__|_| |_|_| |_\__, | / / / /</div><div class="line">=========|_|==============|___/=/_/_/_/</div><div class="line">:: Spring Boot ::        (v1.4.0.RELEASE)</div></pre></td></tr></table></figure></p>
<p>1、在<code>resource</code>目录下面放入一个<code>banner.txt</code>文件，Spring Boot启动项目的时候就会优先启动这个文件中的内容；<br>2、在里面存放要打印的内容；<br>3、文件中：Spring Boot提供了一个枚举类AnsiColor，通过<code>${AnsiColor.BRIGHT_YELLOW}</code>来控制文件中字符的颜色，<code>${spring-boot.version}</code>这个是springboot的版本号；<br>4、ok啦啦啦……  </p>
<h3 id="额外："><a href="#额外：" class="headerlink" title="额外："></a>额外：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$&#123;application.version&#125;           这个是MANIFEST.MF文件中的版本号  </div><div class="line">$&#123;application.formatted-version&#125; 这个是上面的的版本号前面加v后上括号  </div><div class="line">$&#123;spring-boot.version&#125;           这个是springboot的版本号  </div><div class="line">$&#123;spring-boot.formatted-version&#125; 同上</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>参考链接：<a href="http://www.jianshu.com/p/692be2b00e6b" target="_blank" rel="external">http://www.jianshu.com/p/692be2b00e6b</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　自己一些总结&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://haofangyuan.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="json" scheme="https://haofangyuan.github.io/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>websocket相关问题</title>
    <link href="https://haofangyuan.github.io/2017/10/26/websocket/"/>
    <id>https://haofangyuan.github.io/2017/10/26/websocket/</id>
    <published>2017-10-26T14:56:11.000Z</published>
    <updated>2017-12-06T01:45:56.360Z</updated>
    
    <content type="html"><![CDATA[<p>  自己一些总结<br><a id="more"></a></p>
<h2 id="UnresolvedAddressException"><a href="#UnresolvedAddressException" class="headerlink" title="UnresolvedAddressException"></a>UnresolvedAddressException</h2><p>　　连接 Connecting to WebSocket at ws://www.hfy.com:8888/testSvr，<br>结果出现异常：UnresolvedAddressException  </p>
<p>　　检测发现dns配置正确。后来原因是：服务器连接数已达到上限  </p>
<h2 id="BINARY-PARTIAL-WRITING"><a href="#BINARY-PARTIAL-WRITING" class="headerlink" title="BINARY_PARTIAL_WRITING"></a>BINARY_PARTIAL_WRITING</h2><p>　　此问题的原因是：多线程在同时发送消息。需要加锁。<br>以下是错误代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void handleBinaryMessage(WebSocketSession session, BinaryMessage message) throws Exception &#123;</div><div class="line">    Thread.sleep(1 * 1000);</div><div class="line">    UserProtos.User user = UserProtos.User.parseFrom(message.getPayload());</div><div class="line">    System.out.println(user.getName());</div><div class="line">    try &#123;</div><div class="line">        session.sendMessage(message);</div><div class="line">    &#125; catch (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://or8a8is80.bkt.clouddn.com/BINARY_PARTIAL_WRITING.png" alt=""></p>
<h2 id="强制关闭现有连接"><a href="#强制关闭现有连接" class="headerlink" title="强制关闭现有连接"></a>强制关闭现有连接</h2><p>　　对此进行改进以后,还是报错：java.io.IOException: java.io.IOException: 远程主机强迫关闭了一个现有的连接。发送之前判断session是否打开。<br>　　session突然关闭，handler的handleTextMessage方法还是会接收到消息的。所有数据处理之前，可以使用session.isOpen()来判断session的状态。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void handleBinaryMessage(WebSocketSession session, BinaryMessage message) throws Exception &#123;</div><div class="line">    UserProtos.User user = UserProtos.User.parseFrom(message.getPayload());</div><div class="line">    System.out.println(user.getName());</div><div class="line">    try &#123;</div><div class="line">        if (session.isOpen()) &#123;</div><div class="line">            session.sendMessage(message);</div><div class="line">        &#125;</div><div class="line">    &#125; catch (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://or8a8is80.bkt.clouddn.com/IOException.png" alt=""></p>
<h2 id="timeoutException"><a href="#timeoutException" class="headerlink" title="timeoutException"></a>timeoutException</h2><p>　　同时发现会报错：WritePendingException<br>　　这种问题在服务端处理的比较慢的时候出现。<br>　　为了更改的找出问题所在，客户端一秒发送100条数据，服务端一秒钟处理一条数据（线程休眠），出现此问题。<br>　　因为：很多数据存储在缓存中，无法继续写入，超时。<br>　　至于写绑定异常，本人认为是：超时关闭，写入关闭原因，而之前的数据超时没写完，两个一起写造成的。<br><img src="http://or8a8is80.bkt.clouddn.com/TimeoutException.png" alt=""></p>
<h2 id="websocket超时断开"><a href="#websocket超时断开" class="headerlink" title="websocket超时断开"></a>websocket超时断开</h2><p>　　两个socket间，如果不长时间进行通信，会自动断开。虽然断开可以接收到通知，但是还有路由等原因会导致断开，是接不到通知的，察觉不到。一端认为还在，另一端已经断开了。<br>解决办法：<br>　　发送心跳包</p>
<h2 id="IOException-Too-many-open-files"><a href="#IOException-Too-many-open-files" class="headerlink" title="IOException:Too many open files"></a>IOException:Too many open files</h2><p>服务器无法联网，websocket连接其他服务器，报错UnresolvedAddressException：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">java.nio.channels.UnresolvedAddressException: null</div><div class="line">	at sun.nio.ch.Net.checkAddress(Net.java:101) ~[na:1.8.0_101]</div><div class="line">	at sun.nio.ch.UnixAsynchronousSocketChannelImpl.implConnect(UnixAsynchronousSocketChannelImpl.java:301) ~[na:1.8.0_101]</div><div class="line">	at sun.nio.ch.AsynchronousSocketChannelImpl.connect(AsynchronousSocketChannelImpl.java:199) ~[na:1.8.0_101]</div><div class="line">	at org.apache.tomcat.websocket.WsWebSocketContainer.connectToServer(WsWebSocketContainer.java:297) ~[tomcat-embed-websocket-8.5.16.jar!/:8.5.16]</div><div class="line">	at org.springframework.web.socket.client.standard.StandardWebSocketClient$1.call(StandardWebSocketClient.java:150) ~[spring-websocket-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</div><div class="line">	at org.springframework.web.socket.client.standard.StandardWebSocketClient$1.call(StandardWebSocketClient.java:147) ~[spring-websocket-4.3.10.RELEASE.jar!/:4.3.10.RELEASE]</div><div class="line">	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[na:1.8.0_101]</div><div class="line">	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_101]</div></pre></td></tr></table></figure></p>
<p>没有联网，报错正常，但是运行一段时间后，报了以下错误。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">2017-11-21 05:30:00,010:ERROR http-nio-8888-Acceptor-0 (DirectJDKLog.java:181) - Socket accept failed</div><div class="line">java.io.IOException: Too many open files</div><div class="line">    at sun.nio.ch.ServerSocketChannelImpl.accept0(Native Method) ~[?:1.8.0_101]</div><div class="line">    at sun.nio.ch.ServerSocketChannelImpl.accept(ServerSocketChannelImpl.java:422) ~[?:1.8.0_101]</div><div class="line">    at sun.nio.ch.ServerSocketChannelImpl.accept(ServerSocketChannelImpl.java:250) ~[?:1.8.0_101]</div><div class="line">    at org.apache.tomcat.util.net.NioEndpoint$Acceptor.run(NioEndpoint.java:457) [tomcat-embed-core-8.5.4.jar!/:8.5.4]</div><div class="line">    at java.lang.Thread.run(Thread.java:745) [?:1.8.0_101]</div></pre></td></tr></table></figure></p>
<p>查看进程号：<code>ps -ef | grep java</code> 再用命令<code>lsof -p 进程号 | wc -l</code>发现打开的文件数量很多。<code>lsof -p 进程号</code>则发现有大量类似的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java    13597 root   51u  sock                0,6      0t0  185981 can&apos;t identify protocol</div></pre></td></tr></table></figure></p>
<p>What？什么原因？网络搜索查看原因，解释说socket没有关闭。定位到打开socket的地方，只是简单的下面几行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">StandardWebSocketClient client = new StandardWebSocketClient();</div><div class="line">WebSocketConnectionManager manager = new WebSocketConnectionManager(</div><div class="line">                client, handler, WS_URI);</div><div class="line">manager.setOrigin(ORIGIN);</div><div class="line">manager.start();</div></pre></td></tr></table></figure></p>
<p>不明白，查看源码，追踪到WsWebSocketContainer中，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">public Session connectToServer(Endpoint endpoint,</div><div class="line">            ClientEndpointConfig clientEndpointConfiguration, URI path)</div><div class="line">            throws DeploymentException &#123;</div><div class="line">	// ......</div><div class="line"></div><div class="line">	// Open the connection</div><div class="line">	Future&lt;Void&gt; fConnect = socketChannel.connect(sa);</div><div class="line">	AsyncChannelWrapper channel = null;</div><div class="line"></div><div class="line">	// ......</div><div class="line"></div><div class="line">  if (secure) &#123;</div><div class="line">      SSLEngine sslEngine = createSSLEngine(userProperties);</div><div class="line">      channel = new AsyncChannelWrapperSecure(socketChannel, sslEngine);</div><div class="line">  &#125; else if (channel == null) &#123;</div><div class="line">      channel = new AsyncChannelWrapperNonSecure(socketChannel);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">	try &#123;</div><div class="line">		// ......</div><div class="line">	&#125; catch (ExecutionException | InterruptedException | SSLException |</div><div class="line">			EOFException | TimeoutException | URISyntaxException e) &#123;</div><div class="line">		throw new DeploymentException(</div><div class="line">				sm.getString(&quot;wsWebSocketContainer.httpRequestFailed&quot;), e);</div><div class="line">	&#125; finally &#123;</div><div class="line">		if (!success) &#123;</div><div class="line">			channel.close();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	// ......</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>channel.close()实则关闭的就是socketChannel，所以，如果直接写ip，没事，写域名连接，每次报错在connect(sa)处报错，没有关闭。<br>解决：<br> 　　在调用创建socket连接之前，判断了下是否可以连接。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.cnblogs.com/highriver/archive/2012/01/16/2324035.html" target="_blank" rel="external">http://www.cnblogs.com/highriver/archive/2012/01/16/2324035.html</a><br><a href="https://my.oschina.net/ldl123292/blog/304360" target="_blank" rel="external">https://my.oschina.net/ldl123292/blog/304360</a><br>Spring Websocket Session共享解决思路（背景）<a href="http://www.sojson.com/blog/238.html" target="_blank" rel="external">http://www.sojson.com/blog/238.html</a><br>看完让你彻底搞懂Websocket原理 <a href="http://blog.csdn.net/frank_good/article/details/50856585" target="_blank" rel="external">http://blog.csdn.net/frank_good/article/details/50856585</a><br>webSocket中并发的策略 <a href="http://blog.csdn.net/heshuangyuan123/article/details/39023569" target="_blank" rel="external">http://blog.csdn.net/heshuangyuan123/article/details/39023569</a><br>tcp socket文件句柄泄漏<br><a href="http://mdba.cn/2015/03/10/tcp-socket文件句柄泄漏/" target="_blank" rel="external">http://mdba.cn/2015/03/10/tcp-socket文件句柄泄漏/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  自己一些总结&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://haofangyuan.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="json" scheme="https://haofangyuan.github.io/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>springboot整合logback</title>
    <link href="https://haofangyuan.github.io/2017/10/23/springboot-logback/"/>
    <id>https://haofangyuan.github.io/2017/10/23/springboot-logback/</id>
    <published>2017-10-23T12:00:00.000Z</published>
    <updated>2017-11-15T10:04:46.802Z</updated>
    
    <content type="html"><![CDATA[<p>  整合logback，发送错误邮件<br><a id="more"></a>  </p>
<h2 id="pom-xml中引入jar"><a href="#pom-xml中引入jar" class="headerlink" title="pom.xml中引入jar"></a>pom.xml中引入jar</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 发送邮件需要的2个jar --&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">   &lt;groupId&gt;org.codehaus.janino&lt;/groupId&gt;</div><div class="line">   &lt;artifactId&gt;janino&lt;/artifactId&gt;</div><div class="line">   &lt;version&gt;2.7.8&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">   &lt;groupId&gt;javax.mail&lt;/groupId&gt;</div><div class="line">   &lt;artifactId&gt;mail&lt;/artifactId&gt;</div><div class="line">   &lt;version&gt;1.4.7&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<h2 id="配置logback"><a href="#配置logback" class="headerlink" title="配置logback"></a>配置logback</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;!--</div><div class="line">scan:</div><div class="line">    当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。（这个功能可以在不重启运行环境下，调整打印日志的细节，方便定位问题）</div><div class="line">scanPeriod:</div><div class="line">    设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。</div><div class="line">debug:</div><div class="line">    当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。</div><div class="line">--&gt;</div><div class="line">&lt;configuration  scan=&quot;true&quot; scanPeriod=&quot;60 seconds&quot; debug=&quot;false&quot;&gt;</div><div class="line">    &lt;!--</div><div class="line">        logger：日志所处的包</div><div class="line">        level：日志打印级别</div><div class="line">    --&gt;</div><div class="line">    &lt;!--&lt;logger name=&quot;org.springframework&quot; level=&quot;WARN&quot; /&gt;--&gt;</div><div class="line"></div><div class="line">    &lt;contextName&gt;logback&lt;/contextName&gt;</div><div class="line">    &lt;property name=&quot;log.path&quot; value=&quot;./&quot; /&gt;</div><div class="line">    &lt;property name=&quot;project.name&quot; value=&quot;springboot_logback&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;property name=&quot;smtpHost&quot; value=&quot;smtp.163.com&quot; /&gt;</div><div class="line">    &lt;!--&lt;property name=&quot;smtpPort&quot; value=&quot;25&quot; /&gt;--&gt;</div><div class="line">    &lt;property name=&quot;username&quot; value=&quot;xxx@163.com&quot; /&gt;</div><div class="line">    &lt;property name=&quot;password&quot; value=&quot;xxx&quot; /&gt;</div><div class="line">    &lt;property name=&quot;SSL&quot; value=&quot;false&quot; /&gt;</div><div class="line">    &lt;property name=&quot;email_to&quot; value=&quot;xxx@qq.com&quot; /&gt;</div><div class="line">    &lt;property name=&quot;email_from&quot; value=&quot;xxx@163.com&quot; /&gt;</div><div class="line">    &lt;property name=&quot;email_subject&quot; value=&quot;【Error】: %logger&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;!--输出到控制台--&gt;</div><div class="line">    &lt;appender name=&quot;console&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</div><div class="line">        &lt;encoder&gt;</div><div class="line">            &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;:%4p %t %F:%L - %m%n&lt;/pattern&gt;</div><div class="line">        &lt;/encoder&gt;</div><div class="line">    &lt;/appender&gt;</div><div class="line"></div><div class="line">    &lt;!--文件输出的格式设置 --&gt;</div><div class="line">    &lt;appender name=&quot;file&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</div><div class="line">        &lt;file&gt;$&#123;log.path&#125;/$&#123;project.name&#125;.log&lt;/file&gt;</div><div class="line"></div><div class="line">        &lt;!-- 文件输出的日志 的格式 --&gt;</div><div class="line">        &lt;encoder&gt;</div><div class="line">            &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;:%4p %t %F:%L - %m%n&lt;/pattern&gt;</div><div class="line">            &lt;charset&gt;UTF-8&lt;/charset&gt; &lt;!-- 此处设置字符集，防止中文乱码 --&gt;</div><div class="line">        &lt;/encoder&gt;</div><div class="line"></div><div class="line"></div><div class="line">        &lt;!-- 配置日志所生成的目录以及生成文件名的规则 --&gt;</div><div class="line">        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</div><div class="line">            &lt;fileNamePattern&gt;$&#123;log.path&#125;/%d&#123;yyyy-MM&#125;/$&#123;project.name&#125;-%d&#123;yyyy-MM-dd&#125;-%i.log.gz&lt;/fileNamePattern&gt;</div><div class="line">            &lt;!--&lt;fileNamePattern&gt;%d&#123;yyyy-MM-dd&#125;.%i.log.zip&lt;/fileNamePattern&gt;--&gt;</div><div class="line">            &lt;!-- 如果按天来回滚，则最大保存时间为365天，365天之前的都将被清理掉 --&gt;</div><div class="line">            &lt;maxHistory&gt;365&lt;/maxHistory&gt;</div><div class="line">            &lt;!-- 日志总保存量为1GB --&gt;</div><div class="line">            &lt;totalSizeCap&gt;1GB&lt;/totalSizeCap&gt;</div><div class="line"></div><div class="line">            &lt;timeBasedFileNamingAndTriggeringPolicy</div><div class="line">                    class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;</div><div class="line">                &lt;!--文件达到 最大30KB时会被压缩和切割 --&gt;</div><div class="line">                &lt;maxFileSize&gt;30KB&lt;/maxFileSize&gt;</div><div class="line">            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;</div><div class="line">        &lt;/rollingPolicy&gt;</div><div class="line"></div><div class="line">    &lt;/appender&gt;</div><div class="line"></div><div class="line">    &lt;appender name=&quot;EMAIL&quot; class=&quot;ch.qos.logback.classic.net.SMTPAppender&quot;&gt;</div><div class="line">        &lt;smtpHost&gt;$&#123;smtpHost&#125;&lt;/smtpHost&gt;</div><div class="line">        &lt;smtpPort&gt;$&#123;smtpPort&#125;&lt;/smtpPort&gt;</div><div class="line">        &lt;username&gt;$&#123;username&#125;&lt;/username&gt;</div><div class="line">        &lt;password&gt;$&#123;password&#125;&lt;/password&gt;</div><div class="line">        &lt;SSL&gt;$&#123;SSL&#125;&lt;/SSL&gt;</div><div class="line">        &lt;asynchronousSending&gt;false&lt;/asynchronousSending&gt;</div><div class="line">        &lt;to&gt;$&#123;email_to&#125;&lt;/to&gt;</div><div class="line">        &lt;from&gt;$&#123;email_from&#125;&lt;/from&gt;</div><div class="line">        &lt;subject&gt;$&#123;email_subject&#125;&lt;/subject&gt;</div><div class="line">        &lt;layout class=&quot;ch.qos.logback.classic.html.HTMLLayout&quot; &gt;</div><div class="line">            &lt;pattern&gt;%date%level%thread%logger&#123;0&#125;%line%message&lt;/pattern&gt;</div><div class="line">        &lt;/layout&gt;</div><div class="line">        &lt;filter class=&quot;ch.qos.logback.core.filter.EvaluatorFilter&quot;&gt;</div><div class="line">            &lt;evaluator class=&quot;ch.qos.logback.classic.boolex.JaninoEventEvaluator&quot;&gt;</div><div class="line">                &lt;expression&gt;</div><div class="line">                    if(level &gt; WARN) &#123;</div><div class="line">                        return true;</div><div class="line">                    &#125;</div><div class="line">                    return false;</div><div class="line">                &lt;/expression&gt;</div><div class="line">            &lt;/evaluator&gt;</div><div class="line">            &lt;onMatch&gt;ACCEPT&lt;/onMatch&gt;</div><div class="line">            &lt;onMismatch&gt;DENY&lt;/onMismatch&gt;</div><div class="line">        &lt;/filter&gt;</div><div class="line">    &lt;/appender&gt;</div><div class="line"></div><div class="line">    &lt;root level=&quot;debug&quot;&gt;</div><div class="line">        &lt;appender-ref ref=&quot;console&quot; /&gt;</div><div class="line">        &lt;appender-ref ref=&quot;file&quot; /&gt;</div><div class="line">        &lt;appender-ref ref=&quot;EMAIL&quot;/&gt;</div><div class="line">    &lt;/root&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import org.slf4j.Logger;</div><div class="line">import org.slf4j.LoggerFactory;</div><div class="line">private Logger logger = LoggerFactory.getLogger(this.getClass());</div></pre></td></tr></table></figure>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><h3 id="日期格式问题"><a href="#日期格式问题" class="headerlink" title="日期格式问题"></a>日期格式问题</h3><p>日期是 HH:mm:ss.SSS，而不是HH:mm:ss,SSS<br>HH:mm:ss.SSS 是15:21:21.222<br>HH:mm:ss,SSS 是07:21:21  </p>
<h3 id="error打印堆栈信息"><a href="#error打印堆栈信息" class="headerlink" title="error打印堆栈信息"></a>error打印堆栈信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">logger.error(&quot;error: &#123;&#125;&quot;, e); //打印出堆栈信息</div><div class="line">logger.error(&quot;error: &#123;&#125;&quot;, e.getMessage());// 不打印出堆栈信息</div><div class="line">logger.error(&quot;删除用户(&#123;&#125;)异常：&#123;&#125;&quot;, id, e); // 不打印出堆栈信息</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  整合logback，发送错误邮件&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="https://haofangyuan.github.io/categories/springboot/"/>
    
    
      <category term="springboot" scheme="https://haofangyuan.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>FindBugs常见错误描述和解决方法</title>
    <link href="https://haofangyuan.github.io/2017/10/18/findbugs/"/>
    <id>https://haofangyuan.github.io/2017/10/18/findbugs/</id>
    <published>2017-10-18T10:56:11.000Z</published>
    <updated>2017-11-15T10:04:46.727Z</updated>
    
    <content type="html"><![CDATA[<p>　　FindBugs常见错误描述和解决方法  　　<br><a id="more"></a></p>
<p>　　本文转载自：<a href="http://blog.sina.com.cn/s/blog_4adc4b090102vi9p.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_4adc4b090102vi9p.html</a></p>
<h3 id="DLS-DEAD-LOCAL-STORE"><a href="#DLS-DEAD-LOCAL-STORE" class="headerlink" title="DLS_DEAD_LOCAL_STORE"></a>DLS_DEAD_LOCAL_STORE</h3><p>　　描述： Dead store to 未使用的局部变量<br>　　解决方法：局部变量定义后未使用；实例化对象后又重新对该对象赋值</p>
<h3 id="ST-WRITE-TO-STATIC-FROM-INSTANCE-METHOD"><a href="#ST-WRITE-TO-STATIC-FROM-INSTANCE-METHOD" class="headerlink" title="ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD"></a>ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD</h3><p>　　描述：Write to static field 通过实例方法更新静态属性<br>　　常见于常量类，直接通过类名.常量名获取的方式违背了封装的原则，findbugs不提倡使用，而如果将常量改成静态成员变量，又因为spring不支持静态注入导致不能实现，解决方法是非静态的setter调用静态的setter方法给静态成员变量赋值。<br>　　解决方法：<br>　　常量类F：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">　　class F&#123;</div><div class="line">  public static String a = “123”;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　常量a改为静态成员变量，通过F.getA()获取，且由于spring不支持静态注入，改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class F&#123;</div><div class="line">    private static String a;</div><div class="line">    public static Integer getA() &#123;</div><div class="line">      return a;</div><div class="line">    &#125;</div><div class="line">    public void setA(String a) &#123;</div><div class="line">      setAValue(a);</div><div class="line">    &#125;</div><div class="line">    public static void setAValue(String a) &#123;</div><div class="line">      F.a = a;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="BX-UNBOXING-IMMEDIATELY-REBOXED"><a href="#BX-UNBOXING-IMMEDIATELY-REBOXED" class="headerlink" title="BX_UNBOXING_IMMEDIATELY_REBOXED"></a>BX_UNBOXING_IMMEDIATELY_REBOXED</h3><p>　　描述： Boxed value is unboxed and then immediately reboxed  装箱的值被拆箱，然后立刻重新装箱了<br>　　常见的是三目运算时，同时存在基本类型和包装类型。<br>　　解决方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Integer a = null;</div><div class="line">//...</div><div class="line">a = (a == null)?0:a;</div></pre></td></tr></table></figure></p>
<p>　　此问题在于a不为null时，会被拆箱，赋值时再装箱。这是自动装箱拆箱的特性，只要运算中有不同类型，当涉及到类型转换时，编译器就会向下转型，再进行运算。修改方法，统一类型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Integer a = null;</div><div class="line">//...</div><div class="line">a = (a == null)?Integer.valueOf(0):a;</div></pre></td></tr></table></figure></p>
<h3 id="SE-BAD-FIELD"><a href="#SE-BAD-FIELD" class="headerlink" title="SE_BAD_FIELD"></a>SE_BAD_FIELD</h3><p>　　描述： Non-transient non-serializable instance field in serializable class在可序列化的类中存在不能序列化或者不能暂存的数据<br>　　解决方法：<br>　　　　方法1：序列化该对象<br>　　　　方法2：当采用struts2框架开发，不可避免的此问题会大量出现，因为ActionSupport实现了序列化接口，action继承了此类，而service没序列化，所以在action中引用service对象时提示此错误，最简单的解决方法是将service对象声明成transient，即service不需要序列化<br>　　　　方法3(未验证)：To avoid java serialization you need to implement writeObject() and readObject() method in your Class and need to throw NotSerializableException from those method.（action中实现这两个方法?）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">private void writeObject(java.io.ObjectOutputStream stream) throws java.io.IOException &#123;</div><div class="line">    throw new java.io.NotSerializableException( getClass().getName() );</div><div class="line">&#125;</div><div class="line">private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, ClassNotFoundException &#123;</div><div class="line">    throw new java.io.NotSerializableException( getClass().getName() );</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="NP-LOAD-OF-KNOWN-NULL-VALUE"><a href="#NP-LOAD-OF-KNOWN-NULL-VALUE" class="headerlink" title="NP_LOAD_OF_KNOWN_NULL_VALUE"></a>NP_LOAD_OF_KNOWN_NULL_VALUE</h3><p>　　描述： Load of known null value加载已知是null的值<br>　　解决方法：已知方法参数为null是，直接传递null而不是参数名</p>
<h3 id="REC-CATCH-EXCEPTION"><a href="#REC-CATCH-EXCEPTION" class="headerlink" title="REC_CATCH_EXCEPTION"></a>REC_CATCH_EXCEPTION</h3><p>　　描述： Exception is caught when Exception is not thrown 过泛地捕获异常或捕获异常后未做任何处理<br>　　解决方法：异常分类捕获（至少要打印出此异常对象）</p>
<h3 id="NP-NULL-PARAM-DEREF"><a href="#NP-NULL-PARAM-DEREF" class="headerlink" title="NP_NULL_PARAM_DEREF"></a>NP_NULL_PARAM_DEREF</h3><p>　　描述： Null passed for nonnull parameter  把空值传给了非空的参数<br>　　解决方法：增加非空判断</p>
<h3 id="NP-IMMEDIATE-DEREFERENCE-OF-READLINE"><a href="#NP-IMMEDIATE-DEREFERENCE-OF-READLINE" class="headerlink" title="NP_IMMEDIATE_DEREFERENCE_OF_READLINE"></a>NP_IMMEDIATE_DEREFERENCE_OF_READLINE</h3><p>　　描述： Immediate dereference of the result of readLine() 立即引用了readLine()的结果<br>　　解决方法：判断readLine的结果是否为空</p>
<h3 id="EI-EXPOSE-REP-恶意代码漏洞"><a href="#EI-EXPOSE-REP-恶意代码漏洞" class="headerlink" title="EI_EXPOSE_REP 恶意代码漏洞"></a>EI_EXPOSE_REP 恶意代码漏洞</h3><p>　　描述：may expose internal representation by returning  getter方法返回引用类型<br>　　eclipse自动生成的引用类型(Object、数组、Date等)的getter、setter方法会得到或通过对可变对象的引用操作而暴露代码内部实现，解决方法很多，只要返回的或赋值的对象不是原引用对象即可。<br>　　解决方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//以Date类型为例：</div><div class="line">public Date getHappenTime() &#123;</div><div class="line">if(happenTime != null)&#123;</div><div class="line">return (Date) happenTime.clone();</div><div class="line">&#125;</div><div class="line">    return null;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="EI-EXPOSE-REP2-恶意代码漏洞"><a href="#EI-EXPOSE-REP2-恶意代码漏洞" class="headerlink" title="EI_EXPOSE_REP2 恶意代码漏洞"></a>EI_EXPOSE_REP2 恶意代码漏洞</h3><p>　　描述：may expose internal representation by storing an externally mutable object into  setter方法返回引用类型<br>　　eclipse自动生成的引用类型(Object、数组、Date等)的getter、setter方法会得到或通过对可变对象的引用操作而暴露代码内部实现，解决方法很多，只要返回的或赋值的对象不是原引用对象即可。<br>  解决方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//以Date类型为例：</div><div class="line">public void setHappenTime(Date happenTime) &#123;</div><div class="line">  if(happenTime != null)&#123;</div><div class="line">    this.happenTime = (Date) happenTime.clone();</div><div class="line">    &#125;else&#123;</div><div class="line">      this.happenTime = null;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　FindBugs常见错误描述和解决方法  　　&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://haofangyuan.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://haofangyuan.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java中的HashMap</title>
    <link href="https://haofangyuan.github.io/2017/10/16/java-HashMap/"/>
    <id>https://haofangyuan.github.io/2017/10/16/java-HashMap/</id>
    <published>2017-10-16T04:30:00.000Z</published>
    <updated>2017-11-15T10:04:46.747Z</updated>
    
    <content type="html"><![CDATA[<p>　　hashMap的那些事<br><a id="more"></a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="!http://www.infoq.com/cn/articles/ConcurrentHashMap">深入分析ConcurrentHashMap</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　hashMap的那些事&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://haofangyuan.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://haofangyuan.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>了解负载均衡 会话保持 session同步(转)</title>
    <link href="https://haofangyuan.github.io/2017/10/16/java_nginx/"/>
    <id>https://haofangyuan.github.io/2017/10/16/java_nginx/</id>
    <published>2017-10-16T04:30:00.000Z</published>
    <updated>2017-11-15T10:04:46.762Z</updated>
    
    <content type="html"><![CDATA[<p>  自己一些总结<br><a id="more"></a><br>　　转自：<a href="http://bbs.linuxtone.org/forum.php?mod=viewthread&amp;tid=18212" target="_blank" rel="external">http://bbs.linuxtone.org/forum.php?mod=viewthread&amp;tid=18212</a>  </p>
<h2 id="什么负载均衡"><a href="#什么负载均衡" class="headerlink" title="什么负载均衡"></a>什么负载均衡</h2><p>　　一个新网站是不要做负载均衡的，因为访问量不大，流量也不大，所以没有必要搞这些东西。但是随着网站访问量和流量的快速增长，单台服务器受自身硬件条件的限制，很难承受这么大的访问量。<br>　　在这种情况下，有二种方案可以选择：<br>　　1，对单台服务器的硬件进行更新，由双核的变成四核的，内存加大等。<br>　　2，增加服务器的台数，来分担服务器的负担。以实现增加网络带宽，增加服务器的处理能力的目的。<br>　　第一种方法可以理解为纵向发展，这种方法总是有限。<br>　　第二种方法才是解决问题的正确选择。<br>　　实现负载均衡的方法，大至分为二个方向，一种是用软件来实现负载均衡，另一种是硬件实现负载均衡（包括结合硬件和软件）用软件来实现负载均衡，实现负载均衡的过程，自身也要消耗一些系统资源，响应时间增加。例如：LVS,nginx,haproxy,apache等这些基于应用层的负载均衡软件，适合那些访问量不是特别大的网站。如果像sina,163这样大访量的网站，用硬件来实现负载均衡是最明志的选择。<br>　　负载均衡的算法很多，有根据请求数来进行负载均衡的，有根IP来负载均衡的，有根据流量的等等。我经常会用的二种算法:<br>　　1、根据请求数<br>　　　　a，可以实现各台服务器都能比较平均分担客户的请求，其中一台服务器down掉的话也不会造成不好的影响。<br>　　　　b，服务器间的状态要同步，如session，需要其他手段来同步这些状态。<br>　　2、根据IP<br>　　　　a，ip_hash算法可以把一个ip映射到一台服务器上，这样可以解决session同步的问题<br>　　　　b，ip_hash也有不好的地方就是，假如其中的一台服务器down掉的话，映射到这台的服务器的用户就郁闷了。<br>　　　　c，ip_hash容易导致负载不均衡的情况，现在河蟹政府对google的搜索关键词进行过滤，你会经常发现google打不开，但是过一会就好了。这让那些google的爱好者们郁闷不已，很多用户都到国外找代理去了，狗急跳墙，人急帆樯。如果这样的话，这些代理会被分到同一个服务器，会导致负载不均衡 ，甚至失效。  </p>
<h2 id="什么是会话保持，有什么作用"><a href="#什么是会话保持，有什么作用" class="headerlink" title="什么是会话保持，有什么作用"></a>什么是会话保持，有什么作用</h2><p>　　会话保持是指在负载均衡器上有一种机制，在作负载均衡的同时，还保证同一用户相关连的访问请求会被分配到同一台服务器上。</p>
<p>会话保持有什么作用呢，举例说明一下<br>　　如果有一个用户访问请求被分配到服务器A，并且在服务器A登录了，并且在很短的时间，这个用户又发出了一个请求，如果没有会话保持功能的话，这个用户的请求很有可能会被分配到服务器B去，这个时候在服务器B上是没有登录的，所以你要重新登录，但是用户并不知道自己的请求被分配到了哪里，用户的感觉就是登录了，怎么又要登录，用户体验很不好。<br>　　还有你在淘宝上面买东西，从登录＝》拍得东西＝》添加地址＝》付款，这是一个一系列的过程，也可以理解成一次操作过程，所有这一系列的操作过程都应当由一台服务器完成，而不能被负载均衡器分配到不同的服务器上。<br>　　会话保持都会有时间的限制（映射到固定某一台的服务器除外，如：ip_hash）,各种负载均衡工具都会提供这种会话保持时间的设置，LVS，apache等。连php语言都提供了会话保持时间的设定session.gc_maxlifetime会话保持时间的设定要大于session生存时间的设定，这样可以减少需要同步session的情况，但是不能杜绝。所以同步session还是要做的。  </p>
<h2 id="session同步"><a href="#session同步" class="headerlink" title="session同步"></a>session同步</h2><p>　　为什么要进行session同步，说会话保持的时候已经提到了。具体方法请参考web集群时session同步的3种方法  </p>
<p>　　web集群时session同步的3种方法  </p>
<p>　　在做了web集群后，你肯定会首先考虑session同步问题，因为通过负载均衡后，同一个IP访问同一个页面会被分配到不同的服务器上，如果session不同步的话，一个登录用户，一会是登录状态，一会又不是登录状态。所以本文就根据这种情况给出三种不同的方法来解决这个问题：  </p>
<h3 id="利用数据库同步session"><a href="#利用数据库同步session" class="headerlink" title="利用数据库同步session"></a>利用数据库同步session</h3><p>　　在做多服务器session同步时我没有用这种方法，如果非要用这种方法的话，我想过二种方法：<br>　　a，用一个低端电脑建个数据库专门存放web服务器的session，或者，把这个专门的数据库建在文件服务器上，用户访问web服务器时，会去这个专门的数据库check一下session的情况，以达到session同步的目的。<br>　　b，这种方法是把存放session的表和其他数据库表放在一起，如果mysql也做了集群了话，每个mysql节点都要有这张表，并且这张session表的数据表要实时同步。<br>　　说明：用数据库来同步session，会加大数据库的负担，数据库本来就是容易产生瓶颈的地方，如果把session还放到数据库里面，无疑是雪上加霜。上面的二种方法，第一点方法较好，把放session的表独立开来，减轻了真正数据库的负担  </p>
<h3 id="利用cookie同步session"><a href="#利用cookie同步session" class="headerlink" title="利用cookie同步session"></a>利用cookie同步session</h3><p>　　session是文件的形势存放在服务器端的，cookie是文件的形势存在客户端的，怎么实现同步呢？方法很简单，就是把用户访问页面产生的session放到cookie里面，就是以cookie为中转站。你访问web服务器A，产生了session把它放到cookie里面了，你访问被分配到web服务器B，这个时候，web服务器B先判断服务器有没有这个session，如果没有，在去看看客户端的cookie里面有没有这个session，如果也没有，说明session真的不存，如果cookie里面有，就把cookie里面的sessoin同步到web服务器B，这样就可以实现session的同步了。  </p>
<p>　　说明：这种方法实现起来简单，方便，也不会加大数据库的负担，但是如果客户端把cookie禁掉了的话，那么session就无从同步了，这样会给网站带来损失；cookie的安全性不高，虽然它已经加了密，但是还是可以伪造的。  </p>
<h3 id="利用memcache同步session"><a href="#利用memcache同步session" class="headerlink" title="利用memcache同步session"></a>利用memcache同步session</h3><p>　　memcache可以做分布式，如果没有这功能，他也不能用来做session同步。他可以把web服务器中的内存组合起来，成为一个”内存池”，不管是哪个服务器产生的sessoin都可以放到这个”内存池”中，其他的都可以使用。  </p>
<p>　　优点：以这种方式来同步session，不会加大数据库的负担，并且安全性比用cookie大大的提高，把session放到内存里面，比从文件中读取要快很多。<br>　　缺点：memcache把内存分成很多种规格的存储块，有块就有大小，这种方式也就决定了，memcache不能完全利用内存，会产生内存碎片，如果存储块不足，还会产生内存溢出。  </p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>　　上面三种方法都是可行的<br>　　第一种方法，最影响系统速度的那种，不推荐使用；<br>　　第二种方法，效果不错，不过安全隐患一样的存在；<br>　　第三种方法，个人觉得第三种方法是最好的，推荐大家使用;  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  自己一些总结&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://haofangyuan.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://haofangyuan.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>lombok学习</title>
    <link href="https://haofangyuan.github.io/2017/10/11/lombok/"/>
    <id>https://haofangyuan.github.io/2017/10/11/lombok/</id>
    <published>2017-10-11T14:56:11.000Z</published>
    <updated>2017-11-17T10:32:14.867Z</updated>
    
    <content type="html"><![CDATA[<p>　　lombok的学习<br><a id="more"></a><br>  在github上看开源代码，发现maven中用了org.projectlombok，一查询，相见恨晚的感觉啊！</p>
<h2 id="lombok简介"><a href="#lombok简介" class="headerlink" title="lombok简介"></a>lombok简介</h2><p>　　lombok是个什么东东呢？嘿嘿，是通过注解形式帮我们减少一些代码的书写，比如getter、setter、stream的close，null的判断等。<br>　　官网：<a href="http://projectlombok.org/" target="_blank" rel="external">http://projectlombok.org/</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;dependencies&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</div><div class="line">        &lt;artifactId&gt;lombok&lt;/artifactId&gt;</div><div class="line">        &lt;version&gt;1.16.10&lt;/version&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">&lt;/dependencies&gt;</div></pre></td></tr></table></figure>
<h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><p>@Getter: 生成get方法，是类、成员变量注解。<br>@Setter: 生成set方法，是类、成员变量注解。<br>@Data:     生成get、set、toString、equals、hashCode方法、空构造器，是类注解。<br>@ToString: 生成toString方法，是类注解。<br>@Log4j ：  注解在类上；为类提供一个 属性名为log 的 log4j 日志对象。<br>@EqualsAndHashCode： 生成equals方法、hashCode方法，是类注解。<br>@NoArgsConstructor： 注解在类上；为类提供一个无参的构造方法。<br>@AllArgsConstructor：注解在类上；为类提供一个全参的构造方法。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　lombok的学习&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://haofangyuan.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://haofangyuan.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>adminLTE使用中遇到的难点</title>
    <link href="https://haofangyuan.github.io/2017/09/05/adminlte/"/>
    <id>https://haofangyuan.github.io/2017/09/05/adminlte/</id>
    <published>2017-09-05T10:37:11.000Z</published>
    <updated>2017-11-30T06:23:24.530Z</updated>
    
    <content type="html"><![CDATA[<p>　　这里主要记录使用adminlte时遇到的困难。<br><a id="more"></a></p>
<h2 id="修改form缩放展开图标"><a href="#修改form缩放展开图标" class="headerlink" title="修改form缩放展开图标"></a>修改form缩放展开图标</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    // 在引入js之前更改配置</div><div class="line">    var AdminLTEOptions = &#123;</div><div class="line">        boxWidgetOptions: &#123;</div><div class="line">            boxWidgetIcons: &#123;</div><div class="line">                //Collapse icon</div><div class="line">                collapse: &apos;fa-angle-down&apos;,</div><div class="line">                //Open icon</div><div class="line">                open: &apos;fa-angle-right&apos;,</div><div class="line">                //Remove icon</div><div class="line">                remove: &apos;fa-times&apos;</div><div class="line">            &#125;,</div><div class="line">            boxWidgetSelectors: &#123;</div><div class="line">                //Remove button selector</div><div class="line">                remove: &apos;[data-widget=&quot;remove&quot;]&apos;,</div><div class="line">                //Collapse button selector</div><div class="line">                collapse: &apos;[data-widget=&quot;collapse&quot;]&apos;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;script src=&quot;&lt;%=basePath%&gt;/adminlte/dist/js/app.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;&lt;%=basePath%&gt;/adminlte/dist/js/app.min.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="结合chart-js，显示图标，导出图片"><a href="#结合chart-js，显示图标，导出图片" class="headerlink" title="结合chart.js，显示图标，导出图片"></a>结合chart.js，显示图标，导出图片</h2><p>chart.js 不提供任何方法来导出成图片格式。但是因为 chart.js 使用 Canvas 画布来构建图表，因此可以使用 Canvas 画布的功能来输出图表到图片。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">&lt;a id=&quot;link1&quot; download=&quot;CHARTJS.jpg&quot; class=&quot;btn btn-default btn-xs&quot;&gt;&lt;i class=&quot;fa fa-share-square-o &quot;&gt;&lt;/i&gt;&amp;nbsp;导出&lt;/a&gt;</div><div class="line">&lt;div class=&quot;chart&quot;&gt;</div><div class="line">    &lt;canvas id=&quot;lineChart&quot; style=&quot;height:250px&quot;&gt;&lt;/canvas&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line"></div><div class="line">    $(function () &#123;</div><div class="line">        var lineChartData = &#123;</div><div class="line">            labels: $&#123;hours&#125;,</div><div class="line">            datasets: [</div><div class="line">                &#123;</div><div class="line">                    label: &quot;test1&quot;,</div><div class="line">                    fillColor: &quot;rgba(210, 214, 222, 1)&quot;,</div><div class="line">                    strokeColor: &quot;rgba(210, 214, 222, 1)&quot;,</div><div class="line">                    pointColor: &quot;rgba(210, 214, 222, 1)&quot;,</div><div class="line">                    pointStrokeColor: &quot;#c1c7d1&quot;,</div><div class="line">                    pointHighlightFill: &quot;#fff&quot;,</div><div class="line">                    pointHighlightStroke: &quot;rgba(220,220,220,1)&quot;,</div><div class="line">                    data: $&#123;inCarNums&#125;</div><div class="line">                &#125;</div><div class="line">            ]</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        var lineChartOptions = &#123;</div><div class="line">            // 省略一些配置</div><div class="line">            onAnimationComplete: done  // calls function done() &#123;&#125; at end 重点</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        //-------------</div><div class="line">        //- LINE CHART -</div><div class="line">        //--------------</div><div class="line">        var lineChartCanvas = $(&quot;#lineChart&quot;).get(0).getContext(&quot;2d&quot;);</div><div class="line">        var lineChart = new Chart(lineChartCanvas);</div><div class="line">        lineChart.Line(lineChartData, lineChartOptions);</div><div class="line"></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    function done()&#123;</div><div class="line">        var url_base64jp = document.getElementById(&quot;lineChart&quot;).toDataURL(&quot;image/jpg&quot;);</div><div class="line">        $(&quot;#link1&quot;).attr(&quot;href&quot;, url_base64jp);</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://stackoverflow.com/questions/20206038/converting-chart-js-canvas-chart-to-image-using-todataurl-results-in-blank-im" target="_blank" rel="external">Converting Chart.js canvas chart to image using .toDataUrl() results in blank image</a><br><a href="https://www.codeproject.com/Tips/1120045/Export-Chart-js-Charts-as-Image" target="_blank" rel="external">将 Chart.js 生成的图表导出成图片</a>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　这里主要记录使用adminlte时遇到的困难。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://haofangyuan.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="adminlte" scheme="https://haofangyuan.github.io/tags/adminlte/"/>
    
      <category term="chartjs" scheme="https://haofangyuan.github.io/tags/chartjs/"/>
    
  </entry>
  
  <entry>
    <title>js一些其他问题</title>
    <link href="https://haofangyuan.github.io/2017/08/25/html-js/"/>
    <id>https://haofangyuan.github.io/2017/08/25/html-js/</id>
    <published>2017-08-25T03:56:11.000Z</published>
    <updated>2017-11-15T10:04:46.740Z</updated>
    
    <content type="html"><![CDATA[<p>　　记录网上一些好的解决办法的链接　　<br><a id="more"></a></p>
<h2 id="扫描一个二维码"><a href="#扫描一个二维码" class="headerlink" title="扫描一个二维码"></a>扫描一个二维码</h2><p>扫描一个二维码，android和ios都可以下载app。<br>其中涉及到的点：<br>1、html中要判断是来自android还是ios<br>2、因为一般人使用微信扫一扫，所以，判断若是微信，提示在浏览器中打开。</p>
<h2 id="判断打开来源（浏览器-IOS-Android）"><a href="#判断打开来源（浏览器-IOS-Android）" class="headerlink" title="判断打开来源（浏览器 || IOS || Android）"></a>判断打开来源（浏览器 || IOS || Android）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">var browser = &#123;</div><div class="line">	versions: function() &#123;</div><div class="line">		var u = navigator.userAgent, app = navigator.appVersion;</div><div class="line"></div><div class="line">		var isWeixin =  !!/MicroMessenger/i.test(u);</div><div class="line">		return &#123;//移动终端浏览器版本信息</div><div class="line">			trident: u.indexOf(&apos;Trident&apos;) &gt; -1, //IE内核</div><div class="line">			presto: u.indexOf(&apos;Presto&apos;) &gt; -1, //opera内核</div><div class="line">			webKit: u.indexOf(&apos;AppleWebKit&apos;) &gt; -1, //苹果、谷歌内核</div><div class="line">			gecko: u.indexOf(&apos;Gecko&apos;) &gt; -1 &amp;&amp; u.indexOf(&apos;KHTML&apos;) == -1, //火狐内核</div><div class="line">			mobile: !!u.match(/AppleWebKit.*Mobile.*/) || !!u.match(/AppleWebKit/), //是否为移动终端</div><div class="line">			ios: !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端</div><div class="line">			android: u.indexOf(&apos;Android&apos;) &gt; -1 || u.indexOf(&apos;Linux&apos;) &gt; -1, //android终端或者uc浏览器</div><div class="line">			iPhone: u.indexOf(&apos;iPhone&apos;) &gt; -1 || u.indexOf(&apos;Mac&apos;) &gt; -1, //是否为iPhone或者QQHD浏览器</div><div class="line">			iPad: u.indexOf(&apos;iPad&apos;) &gt; -1, //是否iPad</div><div class="line">			webApp: u.indexOf(&apos;Safari&apos;) == -1 //是否web应该程序，没有头部与底部</div><div class="line">		&#125;;</div><div class="line">	&#125;(),</div><div class="line">	language: (navigator.browserLanguage || navigator.language).toLowerCase()</div><div class="line">&#125;</div><div class="line"></div><div class="line">if (browser.versions.ios || browser.versions.iPhone || browser.versions.iPad) &#123;</div><div class="line">	 // ios</div><div class="line">   window.location = &quot;http://...&quot;;</div><div class="line">&#125;</div><div class="line">else if (browser.versions.android) &#123;</div><div class="line">	 // android</div><div class="line">   // todo: Check if it opens in WeChat, if yes, remind, otherwise jump directly to the download link</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="判断打开来源-微信-支付宝"><a href="#判断打开来源-微信-支付宝" class="headerlink" title="判断打开来源(微信 || 支付宝)"></a>判断打开来源(微信 || 支付宝)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">function isWechat()&#123;</div><div class="line">    var ua = window.navigator.userAgent.toLowerCase();</div><div class="line">    if(ua.match(/MicroMessenger/i) == &apos;micromessenger&apos;)&#123;</div><div class="line">        return true;</div><div class="line">    &#125;else&#123;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">function isAli()&#123;</div><div class="line">    var ua = window.navigator.userAgent.toLowerCase();</div><div class="line">    if(ua.match(/AlipayClient/i) ==&apos;alipayclient&apos;)&#123;</div><div class="line">        return true;</div><div class="line">    &#125;else&#123;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>以下是一些好的文章<br>１、<a href="http://www.blogjava.net/Hopes/articles/388873.html" target="_blank" rel="external">JS怎么刷新当前页面</a><br>2、<a href="http://www.jb51.net/article/60538.htm" target="_blank" rel="external">jQuery中$.click()无效问题分析</a>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　记录网上一些好的解决办法的链接　　&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://haofangyuan.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="https://haofangyuan.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>springboot中的jsp</title>
    <link href="https://haofangyuan.github.io/2017/07/01/springboot-jsp/"/>
    <id>https://haofangyuan.github.io/2017/07/01/springboot-jsp/</id>
    <published>2017-07-01T07:03:11.000Z</published>
    <updated>2017-11-15T10:04:46.800Z</updated>
    
    <content type="html"><![CDATA[<p>主要参考以下链接：<br><a id="more"></a>    </p>
<p>主要参考以下链接：<br><a href="http://www.cnblogs.com/softidea/p/6071630.html" target="_blank" rel="external">Spring boot —- java.lang.NoClassDefFoundError: javax/servlet/ServletContext</a><br><a href="https://github.com/luowei/spring-boot-demo-web-jsp" target="_blank" rel="external">https://github.com/luowei/spring-boot-demo-web-jsp</a></p>
<p><a href="http://blog.csdn.net/alan666156/article/details/52168450" target="_blank" rel="external">http://blog.csdn.net/alan666156/article/details/52168450</a></p>
<p><a href="https://segmentfault.com/a/1190000009726106" target="_blank" rel="external">https://segmentfault.com/a/1190000009726106</a></p>
<p><a href="https://stackoverflow.com/questions/41983864/spring-boot-1-5-1-caches-jsp" target="_blank" rel="external">https://stackoverflow.com/questions/41983864/spring-boot-1-5-1-caches-jsp</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要参考以下链接：&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="https://haofangyuan.github.io/categories/springboot/"/>
    
    
      <category term="springboot" scheme="https://haofangyuan.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>springboot中的jar和dll</title>
    <link href="https://haofangyuan.github.io/2017/07/01/springboot-jar/"/>
    <id>https://haofangyuan.github.io/2017/07/01/springboot-jar/</id>
    <published>2017-07-01T07:03:11.000Z</published>
    <updated>2017-11-15T10:04:46.798Z</updated>
    
    <content type="html"><![CDATA[<p>  参考<br><a id="more"></a>  </p>
<p>主要参考以下链接：<br><a href="http://www.blogjava.net/fancydeepin/archive/2012/06/12/380605.html" target="_blank" rel="external">maven安装本地jar</a><br><code>mvn install:install-file -Dfile=C:/Users/hfy/Desktop/sigar-1.6.5.132.jar -DgroupId=org.hyperic -DartifactId=sigar -Dversion=1.6.5.132 -Dpackaging=jar</code><br><a href="http://blog.csdn.net/mayp1/article/details/53996402" target="_blank" rel="external">Spring Boot引用本地jar包</a><br><a href="https://stackoverflow.com/questions/39513467/spring-boot-executable-tomcat-with-dll" target="_blank" rel="external">springboot加载dll</a>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  参考&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="https://haofangyuan.github.io/categories/springboot/"/>
    
    
      <category term="springboot" scheme="https://haofangyuan.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>springboot + mybatis + 多数据源</title>
    <link href="https://haofangyuan.github.io/2017/07/01/springboot-mybatis-datasource/"/>
    <id>https://haofangyuan.github.io/2017/07/01/springboot-mybatis-datasource/</id>
    <published>2017-07-01T07:03:11.000Z</published>
    <updated>2017-07-01T07:03:34.550Z</updated>
    
    <content type="html"><![CDATA[<p> springboot + mybatis + 多数据源 <a href="http://www.cnblogs.com/java-zhao/p/5413845.html" target="_blank" rel="external">http://www.cnblogs.com/java-zhao/p/5413845.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; springboot + mybatis + 多数据源 &lt;a href=&quot;http://www.cnblogs.com/java-zhao/p/5413845.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.
    
    </summary>
    
      <category term="springboot" scheme="https://haofangyuan.github.io/categories/springboot/"/>
    
    
      <category term="mybatis" scheme="https://haofangyuan.github.io/tags/mybatis/"/>
    
      <category term="springboot" scheme="https://haofangyuan.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>objectMapper中自定义类型转换</title>
    <link href="https://haofangyuan.github.io/2017/06/30/java-objectMapper/"/>
    <id>https://haofangyuan.github.io/2017/06/30/java-objectMapper/</id>
    <published>2017-06-30T14:56:11.000Z</published>
    <updated>2017-11-15T10:04:46.755Z</updated>
    
    <content type="html"><![CDATA[<p>  自己一些总结<br><a id="more"></a></p>
<h2 id="日期类型转换"><a href="#日期类型转换" class="headerlink" title="日期类型转换"></a>日期类型转换</h2><p>使用mapper.setDateFormat();来设置日期转换<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@Select(&quot;select * from $&#123;tableName&#125;&quot;)</div><div class="line">List&lt;Map&lt;String, Object&gt;&gt; getTableData(@Param(&quot;tableName&quot;) String tableName);</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">List&lt;Map&lt;String, Object&gt;&gt; tableDatas = tableDataMapper.getTableData(&quot;user&quot;);</div><div class="line">for (Map&lt;String, Object&gt; tableData: tableDatas) &#123;</div><div class="line">    ObjectMapper mapper = new ObjectMapper();</div><div class="line">    String data = mapper.writeValueAsString(tableData);</div><div class="line">    System.out.println(data);</div><div class="line">    mapper.setDateFormat(new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;));</div><div class="line">    data = mapper.writeValueAsString(tableData);</div><div class="line">    System.out.println(data);</div><div class="line">    System.out.println(&quot;=============&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="对于byte的处理"><a href="#对于byte的处理" class="headerlink" title="对于byte的处理"></a>对于byte的处理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public static ObjectMapper getObjectMapperForUplink() &#123;</div><div class="line">    ObjectMapper mapper = new ObjectMapper();</div><div class="line">//  mapper.configure(SerializationFeature.INDENT_OUTPUT, true);</div><div class="line">    mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);</div><div class="line">    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,</div><div class="line">            false);</div><div class="line">    // 处理字节</div><div class="line">    SimpleModule simpleModule = new SimpleModule();</div><div class="line">    simpleModule.addSerializer(byte[].class, getByteSerialize());</div><div class="line">    mapper.registerModule(simpleModule);</div><div class="line">    // 处理日期</div><div class="line">    mapper.setDateFormat(new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;));</div><div class="line">    return mapper;</div><div class="line">&#125;</div><div class="line"></div><div class="line">private static JsonSerializer&lt;byte[]&gt; getByteSerialize() &#123;</div><div class="line">    return new JsonSerializer&lt;byte[]&gt;() &#123;</div><div class="line">        @Override</div><div class="line">        public void serialize(byte[] value, JsonGenerator gen, SerializerProvider serializers) throws IOException, JsonProcessingException &#123;</div><div class="line">            gen.writeString(&quot;&quot;);  // 此处可实现字节转成字符串。如压缩等</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>jackson中自定义处理序列化和反序列化 <a href="http://jackyrong.iteye.com/blog/2005323" target="_blank" rel="external">http://jackyrong.iteye.com/blog/2005323</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  自己一些总结&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="https://haofangyuan.github.io/categories/java/"/>
    
    
      <category term="json" scheme="https://haofangyuan.github.io/tags/json/"/>
    
  </entry>
  
</feed>
